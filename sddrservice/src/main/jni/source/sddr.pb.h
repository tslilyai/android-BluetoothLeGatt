// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sddr.proto

#ifndef PROTOBUF_sddr_2eproto__INCLUDED
#define PROTOBUF_sddr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace SDDR {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Event_EncounterEvent;
class Event_EncounterEventDefaultTypeInternal;
extern Event_EncounterEventDefaultTypeInternal _Event_EncounterEvent_default_instance_;
class Event_EncounterEvent_RSSIEvent;
class Event_EncounterEvent_RSSIEventDefaultTypeInternal;
extern Event_EncounterEvent_RSSIEventDefaultTypeInternal _Event_EncounterEvent_RSSIEvent_default_instance_;
class Event_LinkabilityEvent;
class Event_LinkabilityEventDefaultTypeInternal;
extern Event_LinkabilityEventDefaultTypeInternal _Event_LinkabilityEvent_default_instance_;
class Event_LinkabilityEvent_Entry;
class Event_LinkabilityEvent_EntryDefaultTypeInternal;
extern Event_LinkabilityEvent_EntryDefaultTypeInternal _Event_LinkabilityEvent_Entry_default_instance_;
class Event_RetroactiveInfo;
class Event_RetroactiveInfoDefaultTypeInternal;
extern Event_RetroactiveInfoDefaultTypeInternal _Event_RetroactiveInfo_default_instance_;
class Event_RetroactiveInfo_BloomInfo;
class Event_RetroactiveInfo_BloomInfoDefaultTypeInternal;
extern Event_RetroactiveInfo_BloomInfoDefaultTypeInternal _Event_RetroactiveInfo_BloomInfo_default_instance_;
class Event_RetroactiveInfo_BloomInfo_Bloom;
class Event_RetroactiveInfo_BloomInfo_BloomDefaultTypeInternal;
extern Event_RetroactiveInfo_BloomInfo_BloomDefaultTypeInternal _Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_;
}  // namespace SDDR

namespace SDDR {

namespace protobuf_sddr_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sddr_2eproto

enum Event_LinkabilityEvent_Entry_ModeType {
  Event_LinkabilityEvent_Entry_ModeType_Listen = 0,
  Event_LinkabilityEvent_Entry_ModeType_AdvertAndListen = 1
};
bool Event_LinkabilityEvent_Entry_ModeType_IsValid(int value);
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry_ModeType_ModeType_MIN = Event_LinkabilityEvent_Entry_ModeType_Listen;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry_ModeType_ModeType_MAX = Event_LinkabilityEvent_Entry_ModeType_AdvertAndListen;
const int Event_LinkabilityEvent_Entry_ModeType_ModeType_ARRAYSIZE = Event_LinkabilityEvent_Entry_ModeType_ModeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_LinkabilityEvent_Entry_ModeType_descriptor();
inline const ::std::string& Event_LinkabilityEvent_Entry_ModeType_Name(Event_LinkabilityEvent_Entry_ModeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_LinkabilityEvent_Entry_ModeType_descriptor(), value);
}
inline bool Event_LinkabilityEvent_Entry_ModeType_Parse(
    const ::std::string& name, Event_LinkabilityEvent_Entry_ModeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_LinkabilityEvent_Entry_ModeType>(
    Event_LinkabilityEvent_Entry_ModeType_descriptor(), name, value);
}
enum Event_EncounterEvent_EventType {
  Event_EncounterEvent_EventType_UnconfirmedStart = 3,
  Event_EncounterEvent_EventType_Start = 0,
  Event_EncounterEvent_EventType_Update = 1,
  Event_EncounterEvent_EventType_End = 2
};
bool Event_EncounterEvent_EventType_IsValid(int value);
const Event_EncounterEvent_EventType Event_EncounterEvent_EventType_EventType_MIN = Event_EncounterEvent_EventType_Start;
const Event_EncounterEvent_EventType Event_EncounterEvent_EventType_EventType_MAX = Event_EncounterEvent_EventType_UnconfirmedStart;
const int Event_EncounterEvent_EventType_EventType_ARRAYSIZE = Event_EncounterEvent_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_EncounterEvent_EventType_descriptor();
inline const ::std::string& Event_EncounterEvent_EventType_Name(Event_EncounterEvent_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_EncounterEvent_EventType_descriptor(), value);
}
inline bool Event_EncounterEvent_EventType_Parse(
    const ::std::string& name, Event_EncounterEvent_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_EncounterEvent_EventType>(
    Event_EncounterEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class Event_LinkabilityEvent_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.LinkabilityEvent.Entry) */ {
 public:
  Event_LinkabilityEvent_Entry();
  virtual ~Event_LinkabilityEvent_Entry();

  Event_LinkabilityEvent_Entry(const Event_LinkabilityEvent_Entry& from);

  inline Event_LinkabilityEvent_Entry& operator=(const Event_LinkabilityEvent_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_LinkabilityEvent_Entry(Event_LinkabilityEvent_Entry&& from) noexcept
    : Event_LinkabilityEvent_Entry() {
    *this = ::std::move(from);
  }

  inline Event_LinkabilityEvent_Entry& operator=(Event_LinkabilityEvent_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkabilityEvent_Entry& default_instance();

  static inline const Event_LinkabilityEvent_Entry* internal_default_instance() {
    return reinterpret_cast<const Event_LinkabilityEvent_Entry*>(
               &_Event_LinkabilityEvent_Entry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Event_LinkabilityEvent_Entry* other);
  friend void swap(Event_LinkabilityEvent_Entry& a, Event_LinkabilityEvent_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_LinkabilityEvent_Entry* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_LinkabilityEvent_Entry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_LinkabilityEvent_Entry& from);
  void MergeFrom(const Event_LinkabilityEvent_Entry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_LinkabilityEvent_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_LinkabilityEvent_Entry_ModeType ModeType;
  static const ModeType Listen =
    Event_LinkabilityEvent_Entry_ModeType_Listen;
  static const ModeType AdvertAndListen =
    Event_LinkabilityEvent_Entry_ModeType_AdvertAndListen;
  static inline bool ModeType_IsValid(int value) {
    return Event_LinkabilityEvent_Entry_ModeType_IsValid(value);
  }
  static const ModeType ModeType_MIN =
    Event_LinkabilityEvent_Entry_ModeType_ModeType_MIN;
  static const ModeType ModeType_MAX =
    Event_LinkabilityEvent_Entry_ModeType_ModeType_MAX;
  static const int ModeType_ARRAYSIZE =
    Event_LinkabilityEvent_Entry_ModeType_ModeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ModeType_descriptor() {
    return Event_LinkabilityEvent_Entry_ModeType_descriptor();
  }
  static inline const ::std::string& ModeType_Name(ModeType value) {
    return Event_LinkabilityEvent_Entry_ModeType_Name(value);
  }
  static inline bool ModeType_Parse(const ::std::string& name,
      ModeType* value) {
    return Event_LinkabilityEvent_Entry_ModeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes linkValue = 1;
  bool has_linkvalue() const;
  void clear_linkvalue();
  static const int kLinkValueFieldNumber = 1;
  const ::std::string& linkvalue() const;
  void set_linkvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_linkvalue(::std::string&& value);
  #endif
  void set_linkvalue(const char* value);
  void set_linkvalue(const void* value, size_t size);
  ::std::string* mutable_linkvalue();
  ::std::string* release_linkvalue();
  void set_allocated_linkvalue(::std::string* linkvalue);

  // required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::SDDR::Event_LinkabilityEvent_Entry_ModeType mode() const;
  void set_mode(::SDDR::Event_LinkabilityEvent_Entry_ModeType value);

  // @@protoc_insertion_point(class_scope:SDDR.Event.LinkabilityEvent.Entry)
 private:
  void set_has_linkvalue();
  void clear_has_linkvalue();
  void set_has_mode();
  void clear_has_mode();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr linkvalue_;
  int mode_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event_LinkabilityEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.LinkabilityEvent) */ {
 public:
  Event_LinkabilityEvent();
  virtual ~Event_LinkabilityEvent();

  Event_LinkabilityEvent(const Event_LinkabilityEvent& from);

  inline Event_LinkabilityEvent& operator=(const Event_LinkabilityEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_LinkabilityEvent(Event_LinkabilityEvent&& from) noexcept
    : Event_LinkabilityEvent() {
    *this = ::std::move(from);
  }

  inline Event_LinkabilityEvent& operator=(Event_LinkabilityEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_LinkabilityEvent& default_instance();

  static inline const Event_LinkabilityEvent* internal_default_instance() {
    return reinterpret_cast<const Event_LinkabilityEvent*>(
               &_Event_LinkabilityEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Event_LinkabilityEvent* other);
  friend void swap(Event_LinkabilityEvent& a, Event_LinkabilityEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_LinkabilityEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_LinkabilityEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_LinkabilityEvent& from);
  void MergeFrom(const Event_LinkabilityEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_LinkabilityEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_LinkabilityEvent_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::SDDR::Event_LinkabilityEvent_Entry& entries(int index) const;
  ::SDDR::Event_LinkabilityEvent_Entry* mutable_entries(int index);
  ::SDDR::Event_LinkabilityEvent_Entry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:SDDR.Event.LinkabilityEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry > entries_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event_EncounterEvent_RSSIEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.EncounterEvent.RSSIEvent) */ {
 public:
  Event_EncounterEvent_RSSIEvent();
  virtual ~Event_EncounterEvent_RSSIEvent();

  Event_EncounterEvent_RSSIEvent(const Event_EncounterEvent_RSSIEvent& from);

  inline Event_EncounterEvent_RSSIEvent& operator=(const Event_EncounterEvent_RSSIEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_EncounterEvent_RSSIEvent(Event_EncounterEvent_RSSIEvent&& from) noexcept
    : Event_EncounterEvent_RSSIEvent() {
    *this = ::std::move(from);
  }

  inline Event_EncounterEvent_RSSIEvent& operator=(Event_EncounterEvent_RSSIEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_EncounterEvent_RSSIEvent& default_instance();

  static inline const Event_EncounterEvent_RSSIEvent* internal_default_instance() {
    return reinterpret_cast<const Event_EncounterEvent_RSSIEvent*>(
               &_Event_EncounterEvent_RSSIEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Event_EncounterEvent_RSSIEvent* other);
  friend void swap(Event_EncounterEvent_RSSIEvent& a, Event_EncounterEvent_RSSIEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_EncounterEvent_RSSIEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_EncounterEvent_RSSIEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_EncounterEvent_RSSIEvent& from);
  void MergeFrom(const Event_EncounterEvent_RSSIEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_EncounterEvent_RSSIEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // required sint32 rssi = 2;
  bool has_rssi() const;
  void clear_rssi();
  static const int kRssiFieldNumber = 2;
  ::google::protobuf::int32 rssi() const;
  void set_rssi(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SDDR.Event.EncounterEvent.RSSIEvent)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_rssi();
  void clear_has_rssi();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 rssi_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event_EncounterEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.EncounterEvent) */ {
 public:
  Event_EncounterEvent();
  virtual ~Event_EncounterEvent();

  Event_EncounterEvent(const Event_EncounterEvent& from);

  inline Event_EncounterEvent& operator=(const Event_EncounterEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_EncounterEvent(Event_EncounterEvent&& from) noexcept
    : Event_EncounterEvent() {
    *this = ::std::move(from);
  }

  inline Event_EncounterEvent& operator=(Event_EncounterEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_EncounterEvent& default_instance();

  static inline const Event_EncounterEvent* internal_default_instance() {
    return reinterpret_cast<const Event_EncounterEvent*>(
               &_Event_EncounterEvent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Event_EncounterEvent* other);
  friend void swap(Event_EncounterEvent& a, Event_EncounterEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_EncounterEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_EncounterEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_EncounterEvent& from);
  void MergeFrom(const Event_EncounterEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_EncounterEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_EncounterEvent_RSSIEvent RSSIEvent;

  typedef Event_EncounterEvent_EventType EventType;
  static const EventType UnconfirmedStart =
    Event_EncounterEvent_EventType_UnconfirmedStart;
  static const EventType Start =
    Event_EncounterEvent_EventType_Start;
  static const EventType Update =
    Event_EncounterEvent_EventType_Update;
  static const EventType End =
    Event_EncounterEvent_EventType_End;
  static inline bool EventType_IsValid(int value) {
    return Event_EncounterEvent_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    Event_EncounterEvent_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    Event_EncounterEvent_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    Event_EncounterEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return Event_EncounterEvent_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return Event_EncounterEvent_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return Event_EncounterEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  int rssievents_size() const;
  void clear_rssievents();
  static const int kRssiEventsFieldNumber = 5;
  const ::SDDR::Event_EncounterEvent_RSSIEvent& rssievents(int index) const;
  ::SDDR::Event_EncounterEvent_RSSIEvent* mutable_rssievents(int index);
  ::SDDR::Event_EncounterEvent_RSSIEvent* add_rssievents();
  ::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent >*
      mutable_rssievents();
  const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent >&
      rssievents() const;

  // repeated bytes matchingSet = 6;
  int matchingset_size() const;
  void clear_matchingset();
  static const int kMatchingSetFieldNumber = 6;
  const ::std::string& matchingset(int index) const;
  ::std::string* mutable_matchingset(int index);
  void set_matchingset(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_matchingset(int index, ::std::string&& value);
  #endif
  void set_matchingset(int index, const char* value);
  void set_matchingset(int index, const void* value, size_t size);
  ::std::string* add_matchingset();
  void add_matchingset(const ::std::string& value);
  #if LANG_CXX11
  void add_matchingset(::std::string&& value);
  #endif
  void add_matchingset(const char* value);
  void add_matchingset(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& matchingset() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_matchingset();

  // repeated bytes sharedSecrets = 7;
  int sharedsecrets_size() const;
  void clear_sharedsecrets();
  static const int kSharedSecretsFieldNumber = 7;
  const ::std::string& sharedsecrets(int index) const;
  ::std::string* mutable_sharedsecrets(int index);
  void set_sharedsecrets(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sharedsecrets(int index, ::std::string&& value);
  #endif
  void set_sharedsecrets(int index, const char* value);
  void set_sharedsecrets(int index, const void* value, size_t size);
  ::std::string* add_sharedsecrets();
  void add_sharedsecrets(const ::std::string& value);
  #if LANG_CXX11
  void add_sharedsecrets(::std::string&& value);
  #endif
  void add_sharedsecrets(const char* value);
  void add_sharedsecrets(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sharedsecrets() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sharedsecrets();

  // required string address = 4;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required uint64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // required int32 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required bool matchingSetUpdated = 9;
  bool has_matchingsetupdated() const;
  void clear_matchingsetupdated();
  static const int kMatchingSetUpdatedFieldNumber = 9;
  bool matchingsetupdated() const;
  void set_matchingsetupdated(bool value);

  // required uint64 pkid = 8;
  bool has_pkid() const;
  void clear_pkid();
  static const int kPkidFieldNumber = 8;
  ::google::protobuf::uint64 pkid() const;
  void set_pkid(::google::protobuf::uint64 value);

  // required .SDDR.Event.EncounterEvent.EventType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SDDR::Event_EncounterEvent_EventType type() const;
  void set_type(::SDDR::Event_EncounterEvent_EventType value);

  // @@protoc_insertion_point(class_scope:SDDR.Event.EncounterEvent)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_time();
  void clear_has_time();
  void set_has_id();
  void clear_has_id();
  void set_has_address();
  void clear_has_address();
  void set_has_pkid();
  void clear_has_pkid();
  void set_has_matchingsetupdated();
  void clear_has_matchingsetupdated();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent > rssievents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> matchingset_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sharedsecrets_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 id_;
  bool matchingsetupdated_;
  ::google::protobuf::uint64 pkid_;
  int type_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event_RetroactiveInfo_BloomInfo_Bloom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom) */ {
 public:
  Event_RetroactiveInfo_BloomInfo_Bloom();
  virtual ~Event_RetroactiveInfo_BloomInfo_Bloom();

  Event_RetroactiveInfo_BloomInfo_Bloom(const Event_RetroactiveInfo_BloomInfo_Bloom& from);

  inline Event_RetroactiveInfo_BloomInfo_Bloom& operator=(const Event_RetroactiveInfo_BloomInfo_Bloom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_RetroactiveInfo_BloomInfo_Bloom(Event_RetroactiveInfo_BloomInfo_Bloom&& from) noexcept
    : Event_RetroactiveInfo_BloomInfo_Bloom() {
    *this = ::std::move(from);
  }

  inline Event_RetroactiveInfo_BloomInfo_Bloom& operator=(Event_RetroactiveInfo_BloomInfo_Bloom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_RetroactiveInfo_BloomInfo_Bloom& default_instance();

  static inline const Event_RetroactiveInfo_BloomInfo_Bloom* internal_default_instance() {
    return reinterpret_cast<const Event_RetroactiveInfo_BloomInfo_Bloom*>(
               &_Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Event_RetroactiveInfo_BloomInfo_Bloom* other);
  friend void swap(Event_RetroactiveInfo_BloomInfo_Bloom& a, Event_RetroactiveInfo_BloomInfo_Bloom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_RetroactiveInfo_BloomInfo_Bloom* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_RetroactiveInfo_BloomInfo_Bloom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_RetroactiveInfo_BloomInfo_Bloom& from);
  void MergeFrom(const Event_RetroactiveInfo_BloomInfo_Bloom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_RetroactiveInfo_BloomInfo_Bloom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes bits_ = 4;
  bool has_bits_() const;
  void clear_bits_();
  static const int kBitsFieldNumber = 4;
  const ::std::string& bits_() const;
  void set_bits_(const ::std::string& value);
  #if LANG_CXX11
  void set_bits_(::std::string&& value);
  #endif
  void set_bits_(const char* value);
  void set_bits_(const void* value, size_t size);
  ::std::string* mutable_bits_();
  ::std::string* release_bits_();
  void set_allocated_bits_(::std::string* bits_);

  // required uint32 N_ = 1;
  bool has_n_() const;
  void clear_n_();
  static const int kNFieldNumber = 1;
  ::google::protobuf::uint32 n_() const;
  void set_n_(::google::protobuf::uint32 value);

  // required uint32 M_ = 2;
  bool has_m_() const;
  void clear_m_();
  static const int kMFieldNumber = 2;
  ::google::protobuf::uint32 m_() const;
  void set_m_(::google::protobuf::uint32 value);

  // required uint32 K_ = 3;
  bool has_k_() const;
  void clear_k_();
  static const int kKFieldNumber = 3;
  ::google::protobuf::uint32 k_() const;
  void set_k_(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
 private:
  void set_has_n_();
  void clear_has_n_();
  void set_has_m_();
  void clear_has_m_();
  void set_has_k_();
  void clear_has_k_();
  void set_has_bits_();
  void clear_has_bits_();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr bits__;
  ::google::protobuf::uint32 n__;
  ::google::protobuf::uint32 m__;
  ::google::protobuf::uint32 k__;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event_RetroactiveInfo_BloomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.RetroactiveInfo.BloomInfo) */ {
 public:
  Event_RetroactiveInfo_BloomInfo();
  virtual ~Event_RetroactiveInfo_BloomInfo();

  Event_RetroactiveInfo_BloomInfo(const Event_RetroactiveInfo_BloomInfo& from);

  inline Event_RetroactiveInfo_BloomInfo& operator=(const Event_RetroactiveInfo_BloomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_RetroactiveInfo_BloomInfo(Event_RetroactiveInfo_BloomInfo&& from) noexcept
    : Event_RetroactiveInfo_BloomInfo() {
    *this = ::std::move(from);
  }

  inline Event_RetroactiveInfo_BloomInfo& operator=(Event_RetroactiveInfo_BloomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_RetroactiveInfo_BloomInfo& default_instance();

  static inline const Event_RetroactiveInfo_BloomInfo* internal_default_instance() {
    return reinterpret_cast<const Event_RetroactiveInfo_BloomInfo*>(
               &_Event_RetroactiveInfo_BloomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Event_RetroactiveInfo_BloomInfo* other);
  friend void swap(Event_RetroactiveInfo_BloomInfo& a, Event_RetroactiveInfo_BloomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_RetroactiveInfo_BloomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_RetroactiveInfo_BloomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_RetroactiveInfo_BloomInfo& from);
  void MergeFrom(const Event_RetroactiveInfo_BloomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_RetroactiveInfo_BloomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_RetroactiveInfo_BloomInfo_Bloom Bloom;

  // accessors -------------------------------------------------------

  // required bytes prefix_bytes = 2;
  bool has_prefix_bytes() const;
  void clear_prefix_bytes();
  static const int kPrefixBytesFieldNumber = 2;
  const ::std::string& prefix_bytes() const;
  void set_prefix_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_prefix_bytes(::std::string&& value);
  #endif
  void set_prefix_bytes(const char* value);
  void set_prefix_bytes(const void* value, size_t size);
  ::std::string* mutable_prefix_bytes();
  ::std::string* release_prefix_bytes();
  void set_allocated_prefix_bytes(::std::string* prefix_bytes);

  // required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
  bool has_bloom() const;
  void clear_bloom();
  static const int kBloomFieldNumber = 1;
  const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom& bloom() const;
  ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* mutable_bloom();
  ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* release_bloom();
  void set_allocated_bloom(::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* bloom);

  // required uint32 prefix_size = 3;
  bool has_prefix_size() const;
  void clear_prefix_size();
  static const int kPrefixSizeFieldNumber = 3;
  ::google::protobuf::uint32 prefix_size() const;
  void set_prefix_size(::google::protobuf::uint32 value);

  // required float pFalse = 4;
  bool has_pfalse() const;
  void clear_pfalse();
  static const int kPFalseFieldNumber = 4;
  float pfalse() const;
  void set_pfalse(float value);

  // @@protoc_insertion_point(class_scope:SDDR.Event.RetroactiveInfo.BloomInfo)
 private:
  void set_has_bloom();
  void clear_has_bloom();
  void set_has_prefix_bytes();
  void clear_has_prefix_bytes();
  void set_has_prefix_size();
  void clear_has_prefix_size();
  void set_has_pfalse();
  void clear_has_pfalse();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr prefix_bytes_;
  ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* bloom_;
  ::google::protobuf::uint32 prefix_size_;
  float pfalse_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event_RetroactiveInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event.RetroactiveInfo) */ {
 public:
  Event_RetroactiveInfo();
  virtual ~Event_RetroactiveInfo();

  Event_RetroactiveInfo(const Event_RetroactiveInfo& from);

  inline Event_RetroactiveInfo& operator=(const Event_RetroactiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event_RetroactiveInfo(Event_RetroactiveInfo&& from) noexcept
    : Event_RetroactiveInfo() {
    *this = ::std::move(from);
  }

  inline Event_RetroactiveInfo& operator=(Event_RetroactiveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_RetroactiveInfo& default_instance();

  static inline const Event_RetroactiveInfo* internal_default_instance() {
    return reinterpret_cast<const Event_RetroactiveInfo*>(
               &_Event_RetroactiveInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Event_RetroactiveInfo* other);
  friend void swap(Event_RetroactiveInfo& a, Event_RetroactiveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event_RetroactiveInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  Event_RetroactiveInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event_RetroactiveInfo& from);
  void MergeFrom(const Event_RetroactiveInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event_RetroactiveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_RetroactiveInfo_BloomInfo BloomInfo;

  // accessors -------------------------------------------------------

  // repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
  int blooms_size() const;
  void clear_blooms();
  static const int kBloomsFieldNumber = 1;
  const ::SDDR::Event_RetroactiveInfo_BloomInfo& blooms(int index) const;
  ::SDDR::Event_RetroactiveInfo_BloomInfo* mutable_blooms(int index);
  ::SDDR::Event_RetroactiveInfo_BloomInfo* add_blooms();
  ::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo >*
      mutable_blooms();
  const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo >&
      blooms() const;

  // repeated bytes matchingSet = 2;
  int matchingset_size() const;
  void clear_matchingset();
  static const int kMatchingSetFieldNumber = 2;
  const ::std::string& matchingset(int index) const;
  ::std::string* mutable_matchingset(int index);
  void set_matchingset(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_matchingset(int index, ::std::string&& value);
  #endif
  void set_matchingset(int index, const char* value);
  void set_matchingset(int index, const void* value, size_t size);
  ::std::string* add_matchingset();
  void add_matchingset(const ::std::string& value);
  #if LANG_CXX11
  void add_matchingset(::std::string&& value);
  #endif
  void add_matchingset(const char* value);
  void add_matchingset(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& matchingset() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_matchingset();

  // @@protoc_insertion_point(class_scope:SDDR.Event.RetroactiveInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo > blooms_;
  ::google::protobuf::RepeatedPtrField< ::std::string> matchingset_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SDDR.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_LinkabilityEvent LinkabilityEvent;
  typedef Event_EncounterEvent EncounterEvent;
  typedef Event_RetroactiveInfo RetroactiveInfo;

  // accessors -------------------------------------------------------

  // optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
  bool has_linkabilityevent() const;
  void clear_linkabilityevent();
  static const int kLinkabilityEventFieldNumber = 1;
  const ::SDDR::Event_LinkabilityEvent& linkabilityevent() const;
  ::SDDR::Event_LinkabilityEvent* mutable_linkabilityevent();
  ::SDDR::Event_LinkabilityEvent* release_linkabilityevent();
  void set_allocated_linkabilityevent(::SDDR::Event_LinkabilityEvent* linkabilityevent);

  // optional .SDDR.Event.EncounterEvent encounterEvent = 2;
  bool has_encounterevent() const;
  void clear_encounterevent();
  static const int kEncounterEventFieldNumber = 2;
  const ::SDDR::Event_EncounterEvent& encounterevent() const;
  ::SDDR::Event_EncounterEvent* mutable_encounterevent();
  ::SDDR::Event_EncounterEvent* release_encounterevent();
  void set_allocated_encounterevent(::SDDR::Event_EncounterEvent* encounterevent);

  // optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
  bool has_retroactiveinfo() const;
  void clear_retroactiveinfo();
  static const int kRetroactiveInfoFieldNumber = 3;
  const ::SDDR::Event_RetroactiveInfo& retroactiveinfo() const;
  ::SDDR::Event_RetroactiveInfo* mutable_retroactiveinfo();
  ::SDDR::Event_RetroactiveInfo* release_retroactiveinfo();
  void set_allocated_retroactiveinfo(::SDDR::Event_RetroactiveInfo* retroactiveinfo);

  // @@protoc_insertion_point(class_scope:SDDR.Event)
 private:
  void set_has_linkabilityevent();
  void clear_has_linkabilityevent();
  void set_has_encounterevent();
  void clear_has_encounterevent();
  void set_has_retroactiveinfo();
  void clear_has_retroactiveinfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::SDDR::Event_LinkabilityEvent* linkabilityevent_;
  ::SDDR::Event_EncounterEvent* encounterevent_;
  ::SDDR::Event_RetroactiveInfo* retroactiveinfo_;
  friend struct protobuf_sddr_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event_LinkabilityEvent_Entry

// required bytes linkValue = 1;
inline bool Event_LinkabilityEvent_Entry::has_linkvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_LinkabilityEvent_Entry::set_has_linkvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_LinkabilityEvent_Entry::clear_has_linkvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_LinkabilityEvent_Entry::clear_linkvalue() {
  linkvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkvalue();
}
inline const ::std::string& Event_LinkabilityEvent_Entry::linkvalue() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.LinkabilityEvent.Entry.linkValue)
  return linkvalue_.GetNoArena();
}
inline void Event_LinkabilityEvent_Entry::set_linkvalue(const ::std::string& value) {
  set_has_linkvalue();
  linkvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
#if LANG_CXX11
inline void Event_LinkabilityEvent_Entry::set_linkvalue(::std::string&& value) {
  set_has_linkvalue();
  linkvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
#endif
inline void Event_LinkabilityEvent_Entry::set_linkvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkvalue();
  linkvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
inline void Event_LinkabilityEvent_Entry::set_linkvalue(const void* value, size_t size) {
  set_has_linkvalue();
  linkvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
inline ::std::string* Event_LinkabilityEvent_Entry::mutable_linkvalue() {
  set_has_linkvalue();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.LinkabilityEvent.Entry.linkValue)
  return linkvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_LinkabilityEvent_Entry::release_linkvalue() {
  // @@protoc_insertion_point(field_release:SDDR.Event.LinkabilityEvent.Entry.linkValue)
  clear_has_linkvalue();
  return linkvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_LinkabilityEvent_Entry::set_allocated_linkvalue(::std::string* linkvalue) {
  if (linkvalue != NULL) {
    set_has_linkvalue();
  } else {
    clear_has_linkvalue();
  }
  linkvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkvalue);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}

// required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
inline bool Event_LinkabilityEvent_Entry::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_LinkabilityEvent_Entry::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_LinkabilityEvent_Entry::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_LinkabilityEvent_Entry::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::SDDR::Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::mode() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.LinkabilityEvent.Entry.mode)
  return static_cast< ::SDDR::Event_LinkabilityEvent_Entry_ModeType >(mode_);
}
inline void Event_LinkabilityEvent_Entry::set_mode(::SDDR::Event_LinkabilityEvent_Entry_ModeType value) {
  assert(::SDDR::Event_LinkabilityEvent_Entry_ModeType_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.LinkabilityEvent.Entry.mode)
}

// -------------------------------------------------------------------

// Event_LinkabilityEvent

// repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
inline int Event_LinkabilityEvent::entries_size() const {
  return entries_.size();
}
inline void Event_LinkabilityEvent::clear_entries() {
  entries_.Clear();
}
inline const ::SDDR::Event_LinkabilityEvent_Entry& Event_LinkabilityEvent::entries(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.LinkabilityEvent.entries)
  return entries_.Get(index);
}
inline ::SDDR::Event_LinkabilityEvent_Entry* Event_LinkabilityEvent::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.LinkabilityEvent.entries)
  return entries_.Mutable(index);
}
inline ::SDDR::Event_LinkabilityEvent_Entry* Event_LinkabilityEvent::add_entries() {
  // @@protoc_insertion_point(field_add:SDDR.Event.LinkabilityEvent.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry >*
Event_LinkabilityEvent::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.LinkabilityEvent.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry >&
Event_LinkabilityEvent::entries() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.LinkabilityEvent.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Event_EncounterEvent_RSSIEvent

// required uint64 time = 1;
inline bool Event_EncounterEvent_RSSIEvent::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_EncounterEvent_RSSIEvent::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event_EncounterEvent_RSSIEvent::time() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.RSSIEvent.time)
  return time_;
}
inline void Event_EncounterEvent_RSSIEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.RSSIEvent.time)
}

// required sint32 rssi = 2;
inline bool Event_EncounterEvent_RSSIEvent::has_rssi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_EncounterEvent_RSSIEvent::set_has_rssi() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_EncounterEvent_RSSIEvent::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
inline ::google::protobuf::int32 Event_EncounterEvent_RSSIEvent::rssi() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.RSSIEvent.rssi)
  return rssi_;
}
inline void Event_EncounterEvent_RSSIEvent::set_rssi(::google::protobuf::int32 value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.RSSIEvent.rssi)
}

// -------------------------------------------------------------------

// Event_EncounterEvent

// required .SDDR.Event.EncounterEvent.EventType type = 1;
inline bool Event_EncounterEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event_EncounterEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event_EncounterEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event_EncounterEvent::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::SDDR::Event_EncounterEvent_EventType Event_EncounterEvent::type() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.type)
  return static_cast< ::SDDR::Event_EncounterEvent_EventType >(type_);
}
inline void Event_EncounterEvent::set_type(::SDDR::Event_EncounterEvent_EventType value) {
  assert(::SDDR::Event_EncounterEvent_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.type)
}

// required uint64 time = 2;
inline bool Event_EncounterEvent::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_EncounterEvent::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_EncounterEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_EncounterEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 Event_EncounterEvent::time() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.time)
  return time_;
}
inline void Event_EncounterEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.time)
}

// required int32 id = 3;
inline bool Event_EncounterEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_EncounterEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_EncounterEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_EncounterEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Event_EncounterEvent::id() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.id)
  return id_;
}
inline void Event_EncounterEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.id)
}

// required string address = 4;
inline bool Event_EncounterEvent::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_EncounterEvent::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_EncounterEvent::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_EncounterEvent::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Event_EncounterEvent::address() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.address)
  return address_.GetNoArena();
}
inline void Event_EncounterEvent::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.address)
}
#if LANG_CXX11
inline void Event_EncounterEvent::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.EncounterEvent.address)
}
#endif
inline void Event_EncounterEvent::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.EncounterEvent.address)
}
inline void Event_EncounterEvent::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.EncounterEvent.address)
}
inline ::std::string* Event_EncounterEvent::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_EncounterEvent::release_address() {
  // @@protoc_insertion_point(field_release:SDDR.Event.EncounterEvent.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_EncounterEvent::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.EncounterEvent.address)
}

// repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
inline int Event_EncounterEvent::rssievents_size() const {
  return rssievents_.size();
}
inline void Event_EncounterEvent::clear_rssievents() {
  rssievents_.Clear();
}
inline const ::SDDR::Event_EncounterEvent_RSSIEvent& Event_EncounterEvent::rssievents(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_.Get(index);
}
inline ::SDDR::Event_EncounterEvent_RSSIEvent* Event_EncounterEvent::mutable_rssievents(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_.Mutable(index);
}
inline ::SDDR::Event_EncounterEvent_RSSIEvent* Event_EncounterEvent::add_rssievents() {
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent >*
Event_EncounterEvent::mutable_rssievents() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.EncounterEvent.rssiEvents)
  return &rssievents_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent >&
Event_EncounterEvent::rssievents() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_;
}

// repeated bytes matchingSet = 6;
inline int Event_EncounterEvent::matchingset_size() const {
  return matchingset_.size();
}
inline void Event_EncounterEvent::clear_matchingset() {
  matchingset_.Clear();
}
inline const ::std::string& Event_EncounterEvent::matchingset(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_.Get(index);
}
inline ::std::string* Event_EncounterEvent::mutable_matchingset(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_.Mutable(index);
}
inline void Event_EncounterEvent::set_matchingset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.matchingSet)
  matchingset_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Event_EncounterEvent::set_matchingset(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.matchingSet)
  matchingset_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Event_EncounterEvent::set_matchingset(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SDDR.Event.EncounterEvent.matchingSet)
}
inline void Event_EncounterEvent::set_matchingset(int index, const void* value, size_t size) {
  matchingset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.EncounterEvent.matchingSet)
}
inline ::std::string* Event_EncounterEvent::add_matchingset() {
  // @@protoc_insertion_point(field_add_mutable:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_.Add();
}
inline void Event_EncounterEvent::add_matchingset(const ::std::string& value) {
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.matchingSet)
}
#if LANG_CXX11
inline void Event_EncounterEvent::add_matchingset(::std::string&& value) {
  matchingset_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.matchingSet)
}
#endif
inline void Event_EncounterEvent::add_matchingset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SDDR.Event.EncounterEvent.matchingSet)
}
inline void Event_EncounterEvent::add_matchingset(const void* value, size_t size) {
  matchingset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SDDR.Event.EncounterEvent.matchingSet)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_EncounterEvent::matchingset() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Event_EncounterEvent::mutable_matchingset() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.EncounterEvent.matchingSet)
  return &matchingset_;
}

// repeated bytes sharedSecrets = 7;
inline int Event_EncounterEvent::sharedsecrets_size() const {
  return sharedsecrets_.size();
}
inline void Event_EncounterEvent::clear_sharedsecrets() {
  sharedsecrets_.Clear();
}
inline const ::std::string& Event_EncounterEvent::sharedsecrets(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_.Get(index);
}
inline ::std::string* Event_EncounterEvent::mutable_sharedsecrets(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_.Mutable(index);
}
inline void Event_EncounterEvent::set_sharedsecrets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.sharedSecrets)
  sharedsecrets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Event_EncounterEvent::set_sharedsecrets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.sharedSecrets)
  sharedsecrets_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Event_EncounterEvent::set_sharedsecrets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sharedsecrets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SDDR.Event.EncounterEvent.sharedSecrets)
}
inline void Event_EncounterEvent::set_sharedsecrets(int index, const void* value, size_t size) {
  sharedsecrets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.EncounterEvent.sharedSecrets)
}
inline ::std::string* Event_EncounterEvent::add_sharedsecrets() {
  // @@protoc_insertion_point(field_add_mutable:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_.Add();
}
inline void Event_EncounterEvent::add_sharedsecrets(const ::std::string& value) {
  sharedsecrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.sharedSecrets)
}
#if LANG_CXX11
inline void Event_EncounterEvent::add_sharedsecrets(::std::string&& value) {
  sharedsecrets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.sharedSecrets)
}
#endif
inline void Event_EncounterEvent::add_sharedsecrets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sharedsecrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SDDR.Event.EncounterEvent.sharedSecrets)
}
inline void Event_EncounterEvent::add_sharedsecrets(const void* value, size_t size) {
  sharedsecrets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SDDR.Event.EncounterEvent.sharedSecrets)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_EncounterEvent::sharedsecrets() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Event_EncounterEvent::mutable_sharedsecrets() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.EncounterEvent.sharedSecrets)
  return &sharedsecrets_;
}

// required uint64 pkid = 8;
inline bool Event_EncounterEvent::has_pkid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event_EncounterEvent::set_has_pkid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event_EncounterEvent::clear_has_pkid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event_EncounterEvent::clear_pkid() {
  pkid_ = GOOGLE_ULONGLONG(0);
  clear_has_pkid();
}
inline ::google::protobuf::uint64 Event_EncounterEvent::pkid() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.pkid)
  return pkid_;
}
inline void Event_EncounterEvent::set_pkid(::google::protobuf::uint64 value) {
  set_has_pkid();
  pkid_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.pkid)
}

// required bool matchingSetUpdated = 9;
inline bool Event_EncounterEvent::has_matchingsetupdated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_EncounterEvent::set_has_matchingsetupdated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_EncounterEvent::clear_has_matchingsetupdated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_EncounterEvent::clear_matchingsetupdated() {
  matchingsetupdated_ = false;
  clear_has_matchingsetupdated();
}
inline bool Event_EncounterEvent::matchingsetupdated() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.matchingSetUpdated)
  return matchingsetupdated_;
}
inline void Event_EncounterEvent::set_matchingsetupdated(bool value) {
  set_has_matchingsetupdated();
  matchingsetupdated_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.matchingSetUpdated)
}

// -------------------------------------------------------------------

// Event_RetroactiveInfo_BloomInfo_Bloom

// required uint32 N_ = 1;
inline bool Event_RetroactiveInfo_BloomInfo_Bloom::has_n_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_n_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_n_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_n_() {
  n__ = 0u;
  clear_has_n_();
}
inline ::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo_Bloom::n_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.N_)
  return n__;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_n_(::google::protobuf::uint32 value) {
  set_has_n_();
  n__ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.N_)
}

// required uint32 M_ = 2;
inline bool Event_RetroactiveInfo_BloomInfo_Bloom::has_m_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_m_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_m_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_m_() {
  m__ = 0u;
  clear_has_m_();
}
inline ::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo_Bloom::m_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.M_)
  return m__;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_m_(::google::protobuf::uint32 value) {
  set_has_m_();
  m__ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.M_)
}

// required uint32 K_ = 3;
inline bool Event_RetroactiveInfo_BloomInfo_Bloom::has_k_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_k_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_k_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_k_() {
  k__ = 0u;
  clear_has_k_();
}
inline ::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo_Bloom::k_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.K_)
  return k__;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_k_(::google::protobuf::uint32 value) {
  set_has_k_();
  k__ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.K_)
}

// required bytes bits_ = 4;
inline bool Event_RetroactiveInfo_BloomInfo_Bloom::has_bits_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_bits_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_bits_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::clear_bits_() {
  bits__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bits_();
}
inline const ::std::string& Event_RetroactiveInfo_BloomInfo_Bloom::bits_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
  return bits__.GetNoArena();
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(const ::std::string& value) {
  set_has_bits_();
  bits__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
#if LANG_CXX11
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(::std::string&& value) {
  set_has_bits_();
  bits__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
#endif
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bits_();
  bits__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(const void* value, size_t size) {
  set_has_bits_();
  bits__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
inline ::std::string* Event_RetroactiveInfo_BloomInfo_Bloom::mutable_bits_() {
  set_has_bits_();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
  return bits__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_RetroactiveInfo_BloomInfo_Bloom::release_bits_() {
  // @@protoc_insertion_point(field_release:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
  clear_has_bits_();
  return bits__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_RetroactiveInfo_BloomInfo_Bloom::set_allocated_bits_(::std::string* bits_) {
  if (bits_ != NULL) {
    set_has_bits_();
  } else {
    clear_has_bits_();
  }
  bits__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits_);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}

// -------------------------------------------------------------------

// Event_RetroactiveInfo_BloomInfo

// required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
inline bool Event_RetroactiveInfo_BloomInfo::has_bloom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo::set_has_bloom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_has_bloom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_bloom() {
  if (bloom_ != NULL) bloom_->::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom::Clear();
  clear_has_bloom();
}
inline const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom& Event_RetroactiveInfo_BloomInfo::bloom() const {
  const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* p = bloom_;
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom*>(
      &::SDDR::_Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_);
}
inline ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* Event_RetroactiveInfo_BloomInfo::mutable_bloom() {
  set_has_bloom();
  if (bloom_ == NULL) {
    bloom_ = new ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
  return bloom_;
}
inline ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* Event_RetroactiveInfo_BloomInfo::release_bloom() {
  // @@protoc_insertion_point(field_release:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
  clear_has_bloom();
  ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* temp = bloom_;
  bloom_ = NULL;
  return temp;
}
inline void Event_RetroactiveInfo_BloomInfo::set_allocated_bloom(::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* bloom) {
  delete bloom_;
  bloom_ = bloom;
  if (bloom) {
    set_has_bloom();
  } else {
    clear_has_bloom();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
}

// required bytes prefix_bytes = 2;
inline bool Event_RetroactiveInfo_BloomInfo::has_prefix_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo::set_has_prefix_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_has_prefix_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_prefix_bytes() {
  prefix_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix_bytes();
}
inline const ::std::string& Event_RetroactiveInfo_BloomInfo::prefix_bytes() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
  return prefix_bytes_.GetNoArena();
}
inline void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(const ::std::string& value) {
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
#if LANG_CXX11
inline void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(::std::string&& value) {
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
#endif
inline void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
inline void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(const void* value, size_t size) {
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
inline ::std::string* Event_RetroactiveInfo_BloomInfo::mutable_prefix_bytes() {
  set_has_prefix_bytes();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
  return prefix_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event_RetroactiveInfo_BloomInfo::release_prefix_bytes() {
  // @@protoc_insertion_point(field_release:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
  clear_has_prefix_bytes();
  return prefix_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event_RetroactiveInfo_BloomInfo::set_allocated_prefix_bytes(::std::string* prefix_bytes) {
  if (prefix_bytes != NULL) {
    set_has_prefix_bytes();
  } else {
    clear_has_prefix_bytes();
  }
  prefix_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix_bytes);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}

// required uint32 prefix_size = 3;
inline bool Event_RetroactiveInfo_BloomInfo::has_prefix_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo::set_has_prefix_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_has_prefix_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_prefix_size() {
  prefix_size_ = 0u;
  clear_has_prefix_size();
}
inline ::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo::prefix_size() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_size)
  return prefix_size_;
}
inline void Event_RetroactiveInfo_BloomInfo::set_prefix_size(::google::protobuf::uint32 value) {
  set_has_prefix_size();
  prefix_size_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_size)
}

// required float pFalse = 4;
inline bool Event_RetroactiveInfo_BloomInfo::has_pfalse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event_RetroactiveInfo_BloomInfo::set_has_pfalse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_has_pfalse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event_RetroactiveInfo_BloomInfo::clear_pfalse() {
  pfalse_ = 0;
  clear_has_pfalse();
}
inline float Event_RetroactiveInfo_BloomInfo::pfalse() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.pFalse)
  return pfalse_;
}
inline void Event_RetroactiveInfo_BloomInfo::set_pfalse(float value) {
  set_has_pfalse();
  pfalse_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.pFalse)
}

// -------------------------------------------------------------------

// Event_RetroactiveInfo

// repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
inline int Event_RetroactiveInfo::blooms_size() const {
  return blooms_.size();
}
inline void Event_RetroactiveInfo::clear_blooms() {
  blooms_.Clear();
}
inline const ::SDDR::Event_RetroactiveInfo_BloomInfo& Event_RetroactiveInfo::blooms(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_.Get(index);
}
inline ::SDDR::Event_RetroactiveInfo_BloomInfo* Event_RetroactiveInfo::mutable_blooms(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_.Mutable(index);
}
inline ::SDDR::Event_RetroactiveInfo_BloomInfo* Event_RetroactiveInfo::add_blooms() {
  // @@protoc_insertion_point(field_add:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo >*
Event_RetroactiveInfo::mutable_blooms() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.RetroactiveInfo.blooms)
  return &blooms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo >&
Event_RetroactiveInfo::blooms() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_;
}

// repeated bytes matchingSet = 2;
inline int Event_RetroactiveInfo::matchingset_size() const {
  return matchingset_.size();
}
inline void Event_RetroactiveInfo::clear_matchingset() {
  matchingset_.Clear();
}
inline const ::std::string& Event_RetroactiveInfo::matchingset(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_.Get(index);
}
inline ::std::string* Event_RetroactiveInfo::mutable_matchingset(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_.Mutable(index);
}
inline void Event_RetroactiveInfo::set_matchingset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.matchingSet)
  matchingset_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Event_RetroactiveInfo::set_matchingset(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.matchingSet)
  matchingset_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Event_RetroactiveInfo::set_matchingset(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SDDR.Event.RetroactiveInfo.matchingSet)
}
inline void Event_RetroactiveInfo::set_matchingset(int index, const void* value, size_t size) {
  matchingset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.RetroactiveInfo.matchingSet)
}
inline ::std::string* Event_RetroactiveInfo::add_matchingset() {
  // @@protoc_insertion_point(field_add_mutable:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_.Add();
}
inline void Event_RetroactiveInfo::add_matchingset(const ::std::string& value) {
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SDDR.Event.RetroactiveInfo.matchingSet)
}
#if LANG_CXX11
inline void Event_RetroactiveInfo::add_matchingset(::std::string&& value) {
  matchingset_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SDDR.Event.RetroactiveInfo.matchingSet)
}
#endif
inline void Event_RetroactiveInfo::add_matchingset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SDDR.Event.RetroactiveInfo.matchingSet)
}
inline void Event_RetroactiveInfo::add_matchingset(const void* value, size_t size) {
  matchingset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SDDR.Event.RetroactiveInfo.matchingSet)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_RetroactiveInfo::matchingset() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Event_RetroactiveInfo::mutable_matchingset() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.RetroactiveInfo.matchingSet)
  return &matchingset_;
}

// -------------------------------------------------------------------

// Event

// optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
inline bool Event::has_linkabilityevent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_linkabilityevent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_linkabilityevent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_linkabilityevent() {
  if (linkabilityevent_ != NULL) linkabilityevent_->::SDDR::Event_LinkabilityEvent::Clear();
  clear_has_linkabilityevent();
}
inline const ::SDDR::Event_LinkabilityEvent& Event::linkabilityevent() const {
  const ::SDDR::Event_LinkabilityEvent* p = linkabilityevent_;
  // @@protoc_insertion_point(field_get:SDDR.Event.linkabilityEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_LinkabilityEvent*>(
      &::SDDR::_Event_LinkabilityEvent_default_instance_);
}
inline ::SDDR::Event_LinkabilityEvent* Event::mutable_linkabilityevent() {
  set_has_linkabilityevent();
  if (linkabilityevent_ == NULL) {
    linkabilityevent_ = new ::SDDR::Event_LinkabilityEvent;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.linkabilityEvent)
  return linkabilityevent_;
}
inline ::SDDR::Event_LinkabilityEvent* Event::release_linkabilityevent() {
  // @@protoc_insertion_point(field_release:SDDR.Event.linkabilityEvent)
  clear_has_linkabilityevent();
  ::SDDR::Event_LinkabilityEvent* temp = linkabilityevent_;
  linkabilityevent_ = NULL;
  return temp;
}
inline void Event::set_allocated_linkabilityevent(::SDDR::Event_LinkabilityEvent* linkabilityevent) {
  delete linkabilityevent_;
  linkabilityevent_ = linkabilityevent;
  if (linkabilityevent) {
    set_has_linkabilityevent();
  } else {
    clear_has_linkabilityevent();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.linkabilityEvent)
}

// optional .SDDR.Event.EncounterEvent encounterEvent = 2;
inline bool Event::has_encounterevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_encounterevent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_encounterevent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_encounterevent() {
  if (encounterevent_ != NULL) encounterevent_->::SDDR::Event_EncounterEvent::Clear();
  clear_has_encounterevent();
}
inline const ::SDDR::Event_EncounterEvent& Event::encounterevent() const {
  const ::SDDR::Event_EncounterEvent* p = encounterevent_;
  // @@protoc_insertion_point(field_get:SDDR.Event.encounterEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_EncounterEvent*>(
      &::SDDR::_Event_EncounterEvent_default_instance_);
}
inline ::SDDR::Event_EncounterEvent* Event::mutable_encounterevent() {
  set_has_encounterevent();
  if (encounterevent_ == NULL) {
    encounterevent_ = new ::SDDR::Event_EncounterEvent;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.encounterEvent)
  return encounterevent_;
}
inline ::SDDR::Event_EncounterEvent* Event::release_encounterevent() {
  // @@protoc_insertion_point(field_release:SDDR.Event.encounterEvent)
  clear_has_encounterevent();
  ::SDDR::Event_EncounterEvent* temp = encounterevent_;
  encounterevent_ = NULL;
  return temp;
}
inline void Event::set_allocated_encounterevent(::SDDR::Event_EncounterEvent* encounterevent) {
  delete encounterevent_;
  encounterevent_ = encounterevent;
  if (encounterevent) {
    set_has_encounterevent();
  } else {
    clear_has_encounterevent();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.encounterEvent)
}

// optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
inline bool Event::has_retroactiveinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_retroactiveinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_retroactiveinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_retroactiveinfo() {
  if (retroactiveinfo_ != NULL) retroactiveinfo_->::SDDR::Event_RetroactiveInfo::Clear();
  clear_has_retroactiveinfo();
}
inline const ::SDDR::Event_RetroactiveInfo& Event::retroactiveinfo() const {
  const ::SDDR::Event_RetroactiveInfo* p = retroactiveinfo_;
  // @@protoc_insertion_point(field_get:SDDR.Event.retroactiveInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_RetroactiveInfo*>(
      &::SDDR::_Event_RetroactiveInfo_default_instance_);
}
inline ::SDDR::Event_RetroactiveInfo* Event::mutable_retroactiveinfo() {
  set_has_retroactiveinfo();
  if (retroactiveinfo_ == NULL) {
    retroactiveinfo_ = new ::SDDR::Event_RetroactiveInfo;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.retroactiveInfo)
  return retroactiveinfo_;
}
inline ::SDDR::Event_RetroactiveInfo* Event::release_retroactiveinfo() {
  // @@protoc_insertion_point(field_release:SDDR.Event.retroactiveInfo)
  clear_has_retroactiveinfo();
  ::SDDR::Event_RetroactiveInfo* temp = retroactiveinfo_;
  retroactiveinfo_ = NULL;
  return temp;
}
inline void Event::set_allocated_retroactiveinfo(::SDDR::Event_RetroactiveInfo* retroactiveinfo) {
  delete retroactiveinfo_;
  retroactiveinfo_ = retroactiveinfo;
  if (retroactiveinfo) {
    set_has_retroactiveinfo();
  } else {
    clear_has_retroactiveinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.retroactiveInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace SDDR

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SDDR::Event_LinkabilityEvent_Entry_ModeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SDDR::Event_LinkabilityEvent_Entry_ModeType>() {
  return ::SDDR::Event_LinkabilityEvent_Entry_ModeType_descriptor();
}
template <> struct is_proto_enum< ::SDDR::Event_EncounterEvent_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SDDR::Event_EncounterEvent_EventType>() {
  return ::SDDR::Event_EncounterEvent_EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sddr_2eproto__INCLUDED
