// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sddr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sddr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SDDR {
class Event_LinkabilityEvent_EntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_LinkabilityEvent_Entry>
     _instance;
} _Event_LinkabilityEvent_Entry_default_instance_;
class Event_LinkabilityEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_LinkabilityEvent>
     _instance;
} _Event_LinkabilityEvent_default_instance_;
class Event_EncounterEvent_RSSIEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_EncounterEvent_RSSIEvent>
     _instance;
} _Event_EncounterEvent_RSSIEvent_default_instance_;
class Event_EncounterEventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_EncounterEvent>
     _instance;
} _Event_EncounterEvent_default_instance_;
class Event_RetroactiveInfo_BloomInfo_BloomDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_RetroactiveInfo_BloomInfo_Bloom>
     _instance;
} _Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_;
class Event_RetroactiveInfo_BloomInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_RetroactiveInfo_BloomInfo>
     _instance;
} _Event_RetroactiveInfo_BloomInfo_default_instance_;
class Event_RetroactiveInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event_RetroactiveInfo>
     _instance;
} _Event_RetroactiveInfo_default_instance_;
class EventDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Event>
     _instance;
} _Event_default_instance_;

namespace protobuf_sddr_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, linkvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent_Entry, mode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_LinkabilityEvent, entries_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent_RSSIEvent, rssi_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, rssievents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, matchingset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, sharedsecrets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, pkid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_EncounterEvent, matchingsetupdated_),
  5,
  1,
  2,
  0,
  ~0u,
  ~0u,
  ~0u,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo_Bloom, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo_Bloom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo_Bloom, n__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo_Bloom, m__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo_Bloom, k__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo_Bloom, bits__),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo, bloom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo, prefix_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo, prefix_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo_BloomInfo, pfalse_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo, blooms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_RetroactiveInfo, matchingset_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, linkabilityevent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, encounterevent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, retroactiveinfo_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Event_LinkabilityEvent_Entry)},
  { 9, 15, sizeof(Event_LinkabilityEvent)},
  { 16, 23, sizeof(Event_EncounterEvent_RSSIEvent)},
  { 25, 39, sizeof(Event_EncounterEvent)},
  { 48, 57, sizeof(Event_RetroactiveInfo_BloomInfo_Bloom)},
  { 61, 70, sizeof(Event_RetroactiveInfo_BloomInfo)},
  { 74, 81, sizeof(Event_RetroactiveInfo)},
  { 83, 91, sizeof(Event)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_LinkabilityEvent_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_LinkabilityEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_EncounterEvent_RSSIEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_EncounterEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_RetroactiveInfo_BloomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_RetroactiveInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Event_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sddr.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Event_LinkabilityEvent_Entry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_LinkabilityEvent_Entry_default_instance_);_Event_LinkabilityEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_LinkabilityEvent_default_instance_);_Event_EncounterEvent_RSSIEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_EncounterEvent_RSSIEvent_default_instance_);_Event_EncounterEvent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_EncounterEvent_default_instance_);_Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_);_Event_RetroactiveInfo_BloomInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_RetroactiveInfo_BloomInfo_default_instance_);_Event_RetroactiveInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_RetroactiveInfo_default_instance_);_Event_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Event_default_instance_);_Event_RetroactiveInfo_BloomInfo_default_instance_._instance.get_mutable()->bloom_ = const_cast< ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom*>(
      ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->linkabilityevent_ = const_cast< ::SDDR::Event_LinkabilityEvent*>(
      ::SDDR::Event_LinkabilityEvent::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->encounterevent_ = const_cast< ::SDDR::Event_EncounterEvent*>(
      ::SDDR::Event_EncounterEvent::internal_default_instance());
  _Event_default_instance_._instance.get_mutable()->retroactiveinfo_ = const_cast< ::SDDR::Event_RetroactiveInfo*>(
      ::SDDR::Event_RetroactiveInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nsddr.proto\022\004SDDR\"\207\010\n\005Event\0226\n\020linkabil"
      "ityEvent\030\001 \001(\0132\034.SDDR.Event.LinkabilityE"
      "vent\0222\n\016encounterEvent\030\002 \001(\0132\032.SDDR.Even"
      "t.EncounterEvent\0224\n\017retroactiveInfo\030\003 \001("
      "\0132\033.SDDR.Event.RetroactiveInfo\032\314\001\n\020Linka"
      "bilityEvent\0223\n\007entries\030\001 \003(\0132\".SDDR.Even"
      "t.LinkabilityEvent.Entry\032\202\001\n\005Entry\022\021\n\tli"
      "nkValue\030\001 \002(\014\0229\n\004mode\030\002 \002(\0162+.SDDR.Event"
      ".LinkabilityEvent.Entry.ModeType\"+\n\010Mode"
      "Type\022\n\n\006Listen\020\000\022\023\n\017AdvertAndListen\020\001\032\353\002"
      "\n\016EncounterEvent\0222\n\004type\030\001 \002(\0162$.SDDR.Ev"
      "ent.EncounterEvent.EventType\022\014\n\004time\030\002 \002"
      "(\004\022\n\n\002id\030\003 \002(\005\022\017\n\007address\030\004 \002(\t\0228\n\nrssiE"
      "vents\030\005 \003(\0132$.SDDR.Event.EncounterEvent."
      "RSSIEvent\022\023\n\013matchingSet\030\006 \003(\014\022\025\n\rshared"
      "Secrets\030\007 \003(\014\022\014\n\004pkid\030\010 \002(\004\022\032\n\022matchingS"
      "etUpdated\030\t \002(\010\032\'\n\tRSSIEvent\022\014\n\004time\030\001 \002"
      "(\004\022\014\n\004rssi\030\002 \002(\021\"A\n\tEventType\022\024\n\020Unconfi"
      "rmedStart\020\003\022\t\n\005Start\020\000\022\n\n\006Update\020\001\022\007\n\003En"
      "d\020\002\032\236\002\n\017RetroactiveInfo\0225\n\006blooms\030\001 \003(\0132"
      "%.SDDR.Event.RetroactiveInfo.BloomInfo\022\023"
      "\n\013matchingSet\030\002 \003(\014\032\276\001\n\tBloomInfo\022:\n\005blo"
      "om\030\001 \002(\0132+.SDDR.Event.RetroactiveInfo.Bl"
      "oomInfo.Bloom\022\024\n\014prefix_bytes\030\002 \002(\014\022\023\n\013p"
      "refix_size\030\003 \002(\r\022\016\n\006pFalse\030\004 \002(\002\032:\n\005Bloo"
      "m\022\n\n\002N_\030\001 \002(\r\022\n\n\002M_\030\002 \002(\r\022\n\n\002K_\030\003 \002(\r\022\r\n"
      "\005bits_\030\004 \002(\014B(\n\032org.mpi_sws.sddr_userspa"
      "ceB\nSDDR_Proto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sddr.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sddr_2eproto

const ::google::protobuf::EnumDescriptor* Event_LinkabilityEvent_Entry_ModeType_descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_enum_descriptors[0];
}
bool Event_LinkabilityEvent_Entry_ModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::Listen;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::AdvertAndListen;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::ModeType_MIN;
const Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::ModeType_MAX;
const int Event_LinkabilityEvent_Entry::ModeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Event_EncounterEvent_EventType_descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_enum_descriptors[1];
}
bool Event_EncounterEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_EncounterEvent_EventType Event_EncounterEvent::UnconfirmedStart;
const Event_EncounterEvent_EventType Event_EncounterEvent::Start;
const Event_EncounterEvent_EventType Event_EncounterEvent::Update;
const Event_EncounterEvent_EventType Event_EncounterEvent::End;
const Event_EncounterEvent_EventType Event_EncounterEvent::EventType_MIN;
const Event_EncounterEvent_EventType Event_EncounterEvent::EventType_MAX;
const int Event_EncounterEvent::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_LinkabilityEvent_Entry::kLinkValueFieldNumber;
const int Event_LinkabilityEvent_Entry::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_LinkabilityEvent_Entry::Event_LinkabilityEvent_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.LinkabilityEvent.Entry)
}
Event_LinkabilityEvent_Entry::Event_LinkabilityEvent_Entry(const Event_LinkabilityEvent_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  linkvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linkvalue()) {
    linkvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkvalue_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.LinkabilityEvent.Entry)
}

void Event_LinkabilityEvent_Entry::SharedCtor() {
  _cached_size_ = 0;
  linkvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

Event_LinkabilityEvent_Entry::~Event_LinkabilityEvent_Entry() {
  // @@protoc_insertion_point(destructor:SDDR.Event.LinkabilityEvent.Entry)
  SharedDtor();
}

void Event_LinkabilityEvent_Entry::SharedDtor() {
  linkvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Event_LinkabilityEvent_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_LinkabilityEvent_Entry::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_LinkabilityEvent_Entry& Event_LinkabilityEvent_Entry::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_LinkabilityEvent_Entry* Event_LinkabilityEvent_Entry::New(::google::protobuf::Arena* arena) const {
  Event_LinkabilityEvent_Entry* n = new Event_LinkabilityEvent_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_LinkabilityEvent_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.LinkabilityEvent.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_linkvalue()) {
    GOOGLE_DCHECK(!linkvalue_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*linkvalue_.UnsafeRawStringPointer())->clear();
  }
  mode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_LinkabilityEvent_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.LinkabilityEvent.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes linkValue = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_linkvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SDDR::Event_LinkabilityEvent_Entry_ModeType_IsValid(value)) {
            set_mode(static_cast< ::SDDR::Event_LinkabilityEvent_Entry_ModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.LinkabilityEvent.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.LinkabilityEvent.Entry)
  return false;
#undef DO_
}

void Event_LinkabilityEvent_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.LinkabilityEvent.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes linkValue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->linkvalue(), output);
  }

  // required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.LinkabilityEvent.Entry)
}

::google::protobuf::uint8* Event_LinkabilityEvent_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.LinkabilityEvent.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes linkValue = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->linkvalue(), target);
  }

  // required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.LinkabilityEvent.Entry)
  return target;
}

size_t Event_LinkabilityEvent_Entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SDDR.Event.LinkabilityEvent.Entry)
  size_t total_size = 0;

  if (has_linkvalue()) {
    // required bytes linkValue = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->linkvalue());
  }

  if (has_mode()) {
    // required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  return total_size;
}
size_t Event_LinkabilityEvent_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.LinkabilityEvent.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes linkValue = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->linkvalue());

    // required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_LinkabilityEvent_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.LinkabilityEvent.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_LinkabilityEvent_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_LinkabilityEvent_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.LinkabilityEvent.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.LinkabilityEvent.Entry)
    MergeFrom(*source);
  }
}

void Event_LinkabilityEvent_Entry::MergeFrom(const Event_LinkabilityEvent_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.LinkabilityEvent.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_linkvalue();
      linkvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linkvalue_);
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event_LinkabilityEvent_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.LinkabilityEvent.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_LinkabilityEvent_Entry::CopyFrom(const Event_LinkabilityEvent_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.LinkabilityEvent.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_LinkabilityEvent_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Event_LinkabilityEvent_Entry::Swap(Event_LinkabilityEvent_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_LinkabilityEvent_Entry::InternalSwap(Event_LinkabilityEvent_Entry* other) {
  using std::swap;
  linkvalue_.Swap(&other->linkvalue_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_LinkabilityEvent_Entry::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_LinkabilityEvent_Entry

// required bytes linkValue = 1;
bool Event_LinkabilityEvent_Entry::has_linkvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event_LinkabilityEvent_Entry::set_has_linkvalue() {
  _has_bits_[0] |= 0x00000001u;
}
void Event_LinkabilityEvent_Entry::clear_has_linkvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event_LinkabilityEvent_Entry::clear_linkvalue() {
  linkvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linkvalue();
}
const ::std::string& Event_LinkabilityEvent_Entry::linkvalue() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.LinkabilityEvent.Entry.linkValue)
  return linkvalue_.GetNoArena();
}
void Event_LinkabilityEvent_Entry::set_linkvalue(const ::std::string& value) {
  set_has_linkvalue();
  linkvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
#if LANG_CXX11
void Event_LinkabilityEvent_Entry::set_linkvalue(::std::string&& value) {
  set_has_linkvalue();
  linkvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
#endif
void Event_LinkabilityEvent_Entry::set_linkvalue(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linkvalue();
  linkvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
void Event_LinkabilityEvent_Entry::set_linkvalue(const void* value, size_t size) {
  set_has_linkvalue();
  linkvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}
::std::string* Event_LinkabilityEvent_Entry::mutable_linkvalue() {
  set_has_linkvalue();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.LinkabilityEvent.Entry.linkValue)
  return linkvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event_LinkabilityEvent_Entry::release_linkvalue() {
  // @@protoc_insertion_point(field_release:SDDR.Event.LinkabilityEvent.Entry.linkValue)
  clear_has_linkvalue();
  return linkvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event_LinkabilityEvent_Entry::set_allocated_linkvalue(::std::string* linkvalue) {
  if (linkvalue != NULL) {
    set_has_linkvalue();
  } else {
    clear_has_linkvalue();
  }
  linkvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linkvalue);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.LinkabilityEvent.Entry.linkValue)
}

// required .SDDR.Event.LinkabilityEvent.Entry.ModeType mode = 2;
bool Event_LinkabilityEvent_Entry::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event_LinkabilityEvent_Entry::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void Event_LinkabilityEvent_Entry::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event_LinkabilityEvent_Entry::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::SDDR::Event_LinkabilityEvent_Entry_ModeType Event_LinkabilityEvent_Entry::mode() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.LinkabilityEvent.Entry.mode)
  return static_cast< ::SDDR::Event_LinkabilityEvent_Entry_ModeType >(mode_);
}
void Event_LinkabilityEvent_Entry::set_mode(::SDDR::Event_LinkabilityEvent_Entry_ModeType value) {
  assert(::SDDR::Event_LinkabilityEvent_Entry_ModeType_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.LinkabilityEvent.Entry.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_LinkabilityEvent::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_LinkabilityEvent::Event_LinkabilityEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.LinkabilityEvent)
}
Event_LinkabilityEvent::Event_LinkabilityEvent(const Event_LinkabilityEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.LinkabilityEvent)
}

void Event_LinkabilityEvent::SharedCtor() {
  _cached_size_ = 0;
}

Event_LinkabilityEvent::~Event_LinkabilityEvent() {
  // @@protoc_insertion_point(destructor:SDDR.Event.LinkabilityEvent)
  SharedDtor();
}

void Event_LinkabilityEvent::SharedDtor() {
}

void Event_LinkabilityEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_LinkabilityEvent::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_LinkabilityEvent& Event_LinkabilityEvent::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_LinkabilityEvent* Event_LinkabilityEvent::New(::google::protobuf::Arena* arena) const {
  Event_LinkabilityEvent* n = new Event_LinkabilityEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_LinkabilityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.LinkabilityEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_LinkabilityEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.LinkabilityEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.LinkabilityEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.LinkabilityEvent)
  return false;
#undef DO_
}

void Event_LinkabilityEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.LinkabilityEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.LinkabilityEvent)
}

::google::protobuf::uint8* Event_LinkabilityEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.LinkabilityEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.LinkabilityEvent)
  return target;
}

size_t Event_LinkabilityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.LinkabilityEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_LinkabilityEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.LinkabilityEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_LinkabilityEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_LinkabilityEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.LinkabilityEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.LinkabilityEvent)
    MergeFrom(*source);
  }
}

void Event_LinkabilityEvent::MergeFrom(const Event_LinkabilityEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.LinkabilityEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void Event_LinkabilityEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.LinkabilityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_LinkabilityEvent::CopyFrom(const Event_LinkabilityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.LinkabilityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_LinkabilityEvent::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void Event_LinkabilityEvent::Swap(Event_LinkabilityEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_LinkabilityEvent::InternalSwap(Event_LinkabilityEvent* other) {
  using std::swap;
  entries_.InternalSwap(&other->entries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_LinkabilityEvent::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_LinkabilityEvent

// repeated .SDDR.Event.LinkabilityEvent.Entry entries = 1;
int Event_LinkabilityEvent::entries_size() const {
  return entries_.size();
}
void Event_LinkabilityEvent::clear_entries() {
  entries_.Clear();
}
const ::SDDR::Event_LinkabilityEvent_Entry& Event_LinkabilityEvent::entries(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.LinkabilityEvent.entries)
  return entries_.Get(index);
}
::SDDR::Event_LinkabilityEvent_Entry* Event_LinkabilityEvent::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.LinkabilityEvent.entries)
  return entries_.Mutable(index);
}
::SDDR::Event_LinkabilityEvent_Entry* Event_LinkabilityEvent::add_entries() {
  // @@protoc_insertion_point(field_add:SDDR.Event.LinkabilityEvent.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry >*
Event_LinkabilityEvent::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.LinkabilityEvent.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_LinkabilityEvent_Entry >&
Event_LinkabilityEvent::entries() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.LinkabilityEvent.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_EncounterEvent_RSSIEvent::kTimeFieldNumber;
const int Event_EncounterEvent_RSSIEvent::kRssiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_EncounterEvent_RSSIEvent::Event_EncounterEvent_RSSIEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.EncounterEvent.RSSIEvent)
}
Event_EncounterEvent_RSSIEvent::Event_EncounterEvent_RSSIEvent(const Event_EncounterEvent_RSSIEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rssi_) -
    reinterpret_cast<char*>(&time_)) + sizeof(rssi_));
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.EncounterEvent.RSSIEvent)
}

void Event_EncounterEvent_RSSIEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&time_)) + sizeof(rssi_));
}

Event_EncounterEvent_RSSIEvent::~Event_EncounterEvent_RSSIEvent() {
  // @@protoc_insertion_point(destructor:SDDR.Event.EncounterEvent.RSSIEvent)
  SharedDtor();
}

void Event_EncounterEvent_RSSIEvent::SharedDtor() {
}

void Event_EncounterEvent_RSSIEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_EncounterEvent_RSSIEvent::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_EncounterEvent_RSSIEvent& Event_EncounterEvent_RSSIEvent::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_EncounterEvent_RSSIEvent* Event_EncounterEvent_RSSIEvent::New(::google::protobuf::Arena* arena) const {
  Event_EncounterEvent_RSSIEvent* n = new Event_EncounterEvent_RSSIEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_EncounterEvent_RSSIEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.EncounterEvent.RSSIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rssi_) -
        reinterpret_cast<char*>(&time_)) + sizeof(rssi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_EncounterEvent_RSSIEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.EncounterEvent.RSSIEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 rssi = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_rssi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.EncounterEvent.RSSIEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.EncounterEvent.RSSIEvent)
  return false;
#undef DO_
}

void Event_EncounterEvent_RSSIEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.EncounterEvent.RSSIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // required sint32 rssi = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rssi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.EncounterEvent.RSSIEvent)
}

::google::protobuf::uint8* Event_EncounterEvent_RSSIEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.EncounterEvent.RSSIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // required sint32 rssi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rssi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.EncounterEvent.RSSIEvent)
  return target;
}

size_t Event_EncounterEvent_RSSIEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SDDR.Event.EncounterEvent.RSSIEvent)
  size_t total_size = 0;

  if (has_time()) {
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_rssi()) {
    // required sint32 rssi = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->rssi());
  }

  return total_size;
}
size_t Event_EncounterEvent_RSSIEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.EncounterEvent.RSSIEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required sint32 rssi = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->rssi());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_EncounterEvent_RSSIEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.EncounterEvent.RSSIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_EncounterEvent_RSSIEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_EncounterEvent_RSSIEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.EncounterEvent.RSSIEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.EncounterEvent.RSSIEvent)
    MergeFrom(*source);
  }
}

void Event_EncounterEvent_RSSIEvent::MergeFrom(const Event_EncounterEvent_RSSIEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.EncounterEvent.RSSIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      rssi_ = from.rssi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event_EncounterEvent_RSSIEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.EncounterEvent.RSSIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EncounterEvent_RSSIEvent::CopyFrom(const Event_EncounterEvent_RSSIEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.EncounterEvent.RSSIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EncounterEvent_RSSIEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Event_EncounterEvent_RSSIEvent::Swap(Event_EncounterEvent_RSSIEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_EncounterEvent_RSSIEvent::InternalSwap(Event_EncounterEvent_RSSIEvent* other) {
  using std::swap;
  swap(time_, other->time_);
  swap(rssi_, other->rssi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_EncounterEvent_RSSIEvent::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_EncounterEvent_RSSIEvent

// required uint64 time = 1;
bool Event_EncounterEvent_RSSIEvent::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event_EncounterEvent_RSSIEvent::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
void Event_EncounterEvent_RSSIEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event_EncounterEvent_RSSIEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Event_EncounterEvent_RSSIEvent::time() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.RSSIEvent.time)
  return time_;
}
void Event_EncounterEvent_RSSIEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.RSSIEvent.time)
}

// required sint32 rssi = 2;
bool Event_EncounterEvent_RSSIEvent::has_rssi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event_EncounterEvent_RSSIEvent::set_has_rssi() {
  _has_bits_[0] |= 0x00000002u;
}
void Event_EncounterEvent_RSSIEvent::clear_has_rssi() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event_EncounterEvent_RSSIEvent::clear_rssi() {
  rssi_ = 0;
  clear_has_rssi();
}
::google::protobuf::int32 Event_EncounterEvent_RSSIEvent::rssi() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.RSSIEvent.rssi)
  return rssi_;
}
void Event_EncounterEvent_RSSIEvent::set_rssi(::google::protobuf::int32 value) {
  set_has_rssi();
  rssi_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.RSSIEvent.rssi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_EncounterEvent::kTypeFieldNumber;
const int Event_EncounterEvent::kTimeFieldNumber;
const int Event_EncounterEvent::kIdFieldNumber;
const int Event_EncounterEvent::kAddressFieldNumber;
const int Event_EncounterEvent::kRssiEventsFieldNumber;
const int Event_EncounterEvent::kMatchingSetFieldNumber;
const int Event_EncounterEvent::kSharedSecretsFieldNumber;
const int Event_EncounterEvent::kPkidFieldNumber;
const int Event_EncounterEvent::kMatchingSetUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_EncounterEvent::Event_EncounterEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.EncounterEvent)
}
Event_EncounterEvent::Event_EncounterEvent(const Event_EncounterEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rssievents_(from.rssievents_),
      matchingset_(from.matchingset_),
      sharedsecrets_(from.sharedsecrets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.EncounterEvent)
}

void Event_EncounterEvent::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkid_) -
      reinterpret_cast<char*>(&time_)) + sizeof(pkid_));
  type_ = 3;
}

Event_EncounterEvent::~Event_EncounterEvent() {
  // @@protoc_insertion_point(destructor:SDDR.Event.EncounterEvent)
  SharedDtor();
}

void Event_EncounterEvent::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Event_EncounterEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_EncounterEvent::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_EncounterEvent& Event_EncounterEvent::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_EncounterEvent* Event_EncounterEvent::New(::google::protobuf::Arena* arena) const {
  Event_EncounterEvent* n = new Event_EncounterEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_EncounterEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.EncounterEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rssievents_.Clear();
  matchingset_.Clear();
  sharedsecrets_.Clear();
  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pkid_) -
        reinterpret_cast<char*>(&time_)) + sizeof(pkid_));
    type_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_EncounterEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.EncounterEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SDDR.Event.EncounterEvent.EventType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SDDR::Event_EncounterEvent_EventType_IsValid(value)) {
            set_type(static_cast< ::SDDR::Event_EncounterEvent_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SDDR.Event.EncounterEvent.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rssievents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes matchingSet = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_matchingset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes sharedSecrets = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_sharedsecrets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 pkid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pkid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool matchingSetUpdated = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_matchingsetupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matchingsetupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.EncounterEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.EncounterEvent)
  return false;
#undef DO_
}

void Event_EncounterEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.EncounterEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SDDR.Event.EncounterEvent.EventType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required string address = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SDDR.Event.EncounterEvent.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rssievents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rssievents(static_cast<int>(i)), output);
  }

  // repeated bytes matchingSet = 6;
  for (int i = 0, n = this->matchingset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->matchingset(i), output);
  }

  // repeated bytes sharedSecrets = 7;
  for (int i = 0, n = this->sharedsecrets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->sharedsecrets(i), output);
  }

  // required uint64 pkid = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->pkid(), output);
  }

  // required bool matchingSetUpdated = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->matchingsetupdated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.EncounterEvent)
}

::google::protobuf::uint8* Event_EncounterEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.EncounterEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SDDR.Event.EncounterEvent.EventType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required string address = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SDDR.Event.EncounterEvent.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rssievents_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->rssievents(static_cast<int>(i)), deterministic, target);
  }

  // repeated bytes matchingSet = 6;
  for (int i = 0, n = this->matchingset_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->matchingset(i), target);
  }

  // repeated bytes sharedSecrets = 7;
  for (int i = 0, n = this->sharedsecrets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->sharedsecrets(i), target);
  }

  // required uint64 pkid = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->pkid(), target);
  }

  // required bool matchingSetUpdated = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->matchingsetupdated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.EncounterEvent)
  return target;
}

size_t Event_EncounterEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SDDR.Event.EncounterEvent)
  size_t total_size = 0;

  if (has_address()) {
    // required string address = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  if (has_id()) {
    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_matchingsetupdated()) {
    // required bool matchingSetUpdated = 9;
    total_size += 1 + 1;
  }

  if (has_pkid()) {
    // required uint64 pkid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pkid());
  }

  if (has_type()) {
    // required .SDDR.Event.EncounterEvent.EventType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Event_EncounterEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.EncounterEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string address = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

    // required int32 id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required bool matchingSetUpdated = 9;
    total_size += 1 + 1;

    // required uint64 pkid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pkid());

    // required .SDDR.Event.EncounterEvent.EventType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->rssievents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rssievents(static_cast<int>(i)));
    }
  }

  // repeated bytes matchingSet = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->matchingset_size());
  for (int i = 0, n = this->matchingset_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->matchingset(i));
  }

  // repeated bytes sharedSecrets = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sharedsecrets_size());
  for (int i = 0, n = this->sharedsecrets_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->sharedsecrets(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_EncounterEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.EncounterEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_EncounterEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_EncounterEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.EncounterEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.EncounterEvent)
    MergeFrom(*source);
  }
}

void Event_EncounterEvent::MergeFrom(const Event_EncounterEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.EncounterEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rssievents_.MergeFrom(from.rssievents_);
  matchingset_.MergeFrom(from.matchingset_);
  sharedsecrets_.MergeFrom(from.sharedsecrets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      matchingsetupdated_ = from.matchingsetupdated_;
    }
    if (cached_has_bits & 0x00000010u) {
      pkid_ = from.pkid_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event_EncounterEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.EncounterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_EncounterEvent::CopyFrom(const Event_EncounterEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.EncounterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_EncounterEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rssievents())) return false;
  return true;
}

void Event_EncounterEvent::Swap(Event_EncounterEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_EncounterEvent::InternalSwap(Event_EncounterEvent* other) {
  using std::swap;
  rssievents_.InternalSwap(&other->rssievents_);
  matchingset_.InternalSwap(&other->matchingset_);
  sharedsecrets_.InternalSwap(&other->sharedsecrets_);
  address_.Swap(&other->address_);
  swap(time_, other->time_);
  swap(id_, other->id_);
  swap(matchingsetupdated_, other->matchingsetupdated_);
  swap(pkid_, other->pkid_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_EncounterEvent::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_EncounterEvent

// required .SDDR.Event.EncounterEvent.EventType type = 1;
bool Event_EncounterEvent::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Event_EncounterEvent::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void Event_EncounterEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void Event_EncounterEvent::clear_type() {
  type_ = 3;
  clear_has_type();
}
::SDDR::Event_EncounterEvent_EventType Event_EncounterEvent::type() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.type)
  return static_cast< ::SDDR::Event_EncounterEvent_EventType >(type_);
}
void Event_EncounterEvent::set_type(::SDDR::Event_EncounterEvent_EventType value) {
  assert(::SDDR::Event_EncounterEvent_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.type)
}

// required uint64 time = 2;
bool Event_EncounterEvent::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event_EncounterEvent::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Event_EncounterEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event_EncounterEvent::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 Event_EncounterEvent::time() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.time)
  return time_;
}
void Event_EncounterEvent::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.time)
}

// required int32 id = 3;
bool Event_EncounterEvent::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Event_EncounterEvent::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Event_EncounterEvent::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Event_EncounterEvent::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 Event_EncounterEvent::id() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.id)
  return id_;
}
void Event_EncounterEvent::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.id)
}

// required string address = 4;
bool Event_EncounterEvent::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event_EncounterEvent::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Event_EncounterEvent::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event_EncounterEvent::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Event_EncounterEvent::address() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.address)
  return address_.GetNoArena();
}
void Event_EncounterEvent::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.address)
}
#if LANG_CXX11
void Event_EncounterEvent::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.EncounterEvent.address)
}
#endif
void Event_EncounterEvent::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.EncounterEvent.address)
}
void Event_EncounterEvent::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.EncounterEvent.address)
}
::std::string* Event_EncounterEvent::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event_EncounterEvent::release_address() {
  // @@protoc_insertion_point(field_release:SDDR.Event.EncounterEvent.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event_EncounterEvent::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.EncounterEvent.address)
}

// repeated .SDDR.Event.EncounterEvent.RSSIEvent rssiEvents = 5;
int Event_EncounterEvent::rssievents_size() const {
  return rssievents_.size();
}
void Event_EncounterEvent::clear_rssievents() {
  rssievents_.Clear();
}
const ::SDDR::Event_EncounterEvent_RSSIEvent& Event_EncounterEvent::rssievents(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_.Get(index);
}
::SDDR::Event_EncounterEvent_RSSIEvent* Event_EncounterEvent::mutable_rssievents(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_.Mutable(index);
}
::SDDR::Event_EncounterEvent_RSSIEvent* Event_EncounterEvent::add_rssievents() {
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_.Add();
}
::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent >*
Event_EncounterEvent::mutable_rssievents() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.EncounterEvent.rssiEvents)
  return &rssievents_;
}
const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_EncounterEvent_RSSIEvent >&
Event_EncounterEvent::rssievents() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.EncounterEvent.rssiEvents)
  return rssievents_;
}

// repeated bytes matchingSet = 6;
int Event_EncounterEvent::matchingset_size() const {
  return matchingset_.size();
}
void Event_EncounterEvent::clear_matchingset() {
  matchingset_.Clear();
}
const ::std::string& Event_EncounterEvent::matchingset(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_.Get(index);
}
::std::string* Event_EncounterEvent::mutable_matchingset(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_.Mutable(index);
}
void Event_EncounterEvent::set_matchingset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.matchingSet)
  matchingset_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Event_EncounterEvent::set_matchingset(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.matchingSet)
  matchingset_.Mutable(index)->assign(std::move(value));
}
#endif
void Event_EncounterEvent::set_matchingset(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SDDR.Event.EncounterEvent.matchingSet)
}
void Event_EncounterEvent::set_matchingset(int index, const void* value, size_t size) {
  matchingset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.EncounterEvent.matchingSet)
}
::std::string* Event_EncounterEvent::add_matchingset() {
  // @@protoc_insertion_point(field_add_mutable:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_.Add();
}
void Event_EncounterEvent::add_matchingset(const ::std::string& value) {
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.matchingSet)
}
#if LANG_CXX11
void Event_EncounterEvent::add_matchingset(::std::string&& value) {
  matchingset_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.matchingSet)
}
#endif
void Event_EncounterEvent::add_matchingset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SDDR.Event.EncounterEvent.matchingSet)
}
void Event_EncounterEvent::add_matchingset(const void* value, size_t size) {
  matchingset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SDDR.Event.EncounterEvent.matchingSet)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_EncounterEvent::matchingset() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.EncounterEvent.matchingSet)
  return matchingset_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Event_EncounterEvent::mutable_matchingset() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.EncounterEvent.matchingSet)
  return &matchingset_;
}

// repeated bytes sharedSecrets = 7;
int Event_EncounterEvent::sharedsecrets_size() const {
  return sharedsecrets_.size();
}
void Event_EncounterEvent::clear_sharedsecrets() {
  sharedsecrets_.Clear();
}
const ::std::string& Event_EncounterEvent::sharedsecrets(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_.Get(index);
}
::std::string* Event_EncounterEvent::mutable_sharedsecrets(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_.Mutable(index);
}
void Event_EncounterEvent::set_sharedsecrets(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.sharedSecrets)
  sharedsecrets_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Event_EncounterEvent::set_sharedsecrets(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.sharedSecrets)
  sharedsecrets_.Mutable(index)->assign(std::move(value));
}
#endif
void Event_EncounterEvent::set_sharedsecrets(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sharedsecrets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SDDR.Event.EncounterEvent.sharedSecrets)
}
void Event_EncounterEvent::set_sharedsecrets(int index, const void* value, size_t size) {
  sharedsecrets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.EncounterEvent.sharedSecrets)
}
::std::string* Event_EncounterEvent::add_sharedsecrets() {
  // @@protoc_insertion_point(field_add_mutable:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_.Add();
}
void Event_EncounterEvent::add_sharedsecrets(const ::std::string& value) {
  sharedsecrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.sharedSecrets)
}
#if LANG_CXX11
void Event_EncounterEvent::add_sharedsecrets(::std::string&& value) {
  sharedsecrets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SDDR.Event.EncounterEvent.sharedSecrets)
}
#endif
void Event_EncounterEvent::add_sharedsecrets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sharedsecrets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SDDR.Event.EncounterEvent.sharedSecrets)
}
void Event_EncounterEvent::add_sharedsecrets(const void* value, size_t size) {
  sharedsecrets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SDDR.Event.EncounterEvent.sharedSecrets)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_EncounterEvent::sharedsecrets() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.EncounterEvent.sharedSecrets)
  return sharedsecrets_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Event_EncounterEvent::mutable_sharedsecrets() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.EncounterEvent.sharedSecrets)
  return &sharedsecrets_;
}

// required uint64 pkid = 8;
bool Event_EncounterEvent::has_pkid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Event_EncounterEvent::set_has_pkid() {
  _has_bits_[0] |= 0x00000010u;
}
void Event_EncounterEvent::clear_has_pkid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Event_EncounterEvent::clear_pkid() {
  pkid_ = GOOGLE_ULONGLONG(0);
  clear_has_pkid();
}
::google::protobuf::uint64 Event_EncounterEvent::pkid() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.pkid)
  return pkid_;
}
void Event_EncounterEvent::set_pkid(::google::protobuf::uint64 value) {
  set_has_pkid();
  pkid_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.pkid)
}

// required bool matchingSetUpdated = 9;
bool Event_EncounterEvent::has_matchingsetupdated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Event_EncounterEvent::set_has_matchingsetupdated() {
  _has_bits_[0] |= 0x00000008u;
}
void Event_EncounterEvent::clear_has_matchingsetupdated() {
  _has_bits_[0] &= ~0x00000008u;
}
void Event_EncounterEvent::clear_matchingsetupdated() {
  matchingsetupdated_ = false;
  clear_has_matchingsetupdated();
}
bool Event_EncounterEvent::matchingsetupdated() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.EncounterEvent.matchingSetUpdated)
  return matchingsetupdated_;
}
void Event_EncounterEvent::set_matchingsetupdated(bool value) {
  set_has_matchingsetupdated();
  matchingsetupdated_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.EncounterEvent.matchingSetUpdated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_RetroactiveInfo_BloomInfo_Bloom::kNFieldNumber;
const int Event_RetroactiveInfo_BloomInfo_Bloom::kMFieldNumber;
const int Event_RetroactiveInfo_BloomInfo_Bloom::kKFieldNumber;
const int Event_RetroactiveInfo_BloomInfo_Bloom::kBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_RetroactiveInfo_BloomInfo_Bloom::Event_RetroactiveInfo_BloomInfo_Bloom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
}
Event_RetroactiveInfo_BloomInfo_Bloom::Event_RetroactiveInfo_BloomInfo_Bloom(const Event_RetroactiveInfo_BloomInfo_Bloom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bits__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bits_()) {
    bits__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bits__);
  }
  ::memcpy(&n__, &from.n__,
    static_cast<size_t>(reinterpret_cast<char*>(&k__) -
    reinterpret_cast<char*>(&n__)) + sizeof(k__));
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
}

void Event_RetroactiveInfo_BloomInfo_Bloom::SharedCtor() {
  _cached_size_ = 0;
  bits__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k__) -
      reinterpret_cast<char*>(&n__)) + sizeof(k__));
}

Event_RetroactiveInfo_BloomInfo_Bloom::~Event_RetroactiveInfo_BloomInfo_Bloom() {
  // @@protoc_insertion_point(destructor:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  SharedDtor();
}

void Event_RetroactiveInfo_BloomInfo_Bloom::SharedDtor() {
  bits__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Event_RetroactiveInfo_BloomInfo_Bloom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_RetroactiveInfo_BloomInfo_Bloom::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_RetroactiveInfo_BloomInfo_Bloom& Event_RetroactiveInfo_BloomInfo_Bloom::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_RetroactiveInfo_BloomInfo_Bloom* Event_RetroactiveInfo_BloomInfo_Bloom::New(::google::protobuf::Arena* arena) const {
  Event_RetroactiveInfo_BloomInfo_Bloom* n = new Event_RetroactiveInfo_BloomInfo_Bloom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_RetroactiveInfo_BloomInfo_Bloom::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_bits_()) {
    GOOGLE_DCHECK(!bits__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*bits__.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&n__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&k__) -
        reinterpret_cast<char*>(&n__)) + sizeof(k__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_RetroactiveInfo_BloomInfo_Bloom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 N_ = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_n_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 M_ = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_m_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 K_ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_k_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &k__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes bits_ = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bits_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  return false;
#undef DO_
}

void Event_RetroactiveInfo_BloomInfo_Bloom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 N_ = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n_(), output);
  }

  // required uint32 M_ = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->m_(), output);
  }

  // required uint32 K_ = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->k_(), output);
  }

  // required bytes bits_ = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bits_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
}

::google::protobuf::uint8* Event_RetroactiveInfo_BloomInfo_Bloom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 N_ = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n_(), target);
  }

  // required uint32 M_ = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->m_(), target);
  }

  // required uint32 K_ = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->k_(), target);
  }

  // required bytes bits_ = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bits_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  return target;
}

size_t Event_RetroactiveInfo_BloomInfo_Bloom::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  size_t total_size = 0;

  if (has_bits_()) {
    // required bytes bits_ = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bits_());
  }

  if (has_n_()) {
    // required uint32 N_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_());
  }

  if (has_m_()) {
    // required uint32 M_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_());
  }

  if (has_k_()) {
    // required uint32 K_ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->k_());
  }

  return total_size;
}
size_t Event_RetroactiveInfo_BloomInfo_Bloom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes bits_ = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bits_());

    // required uint32 N_ = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n_());

    // required uint32 M_ = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_());

    // required uint32 K_ = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->k_());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_RetroactiveInfo_BloomInfo_Bloom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RetroactiveInfo_BloomInfo_Bloom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_RetroactiveInfo_BloomInfo_Bloom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
    MergeFrom(*source);
  }
}

void Event_RetroactiveInfo_BloomInfo_Bloom::MergeFrom(const Event_RetroactiveInfo_BloomInfo_Bloom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_bits_();
      bits__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bits__);
    }
    if (cached_has_bits & 0x00000002u) {
      n__ = from.n__;
    }
    if (cached_has_bits & 0x00000004u) {
      m__ = from.m__;
    }
    if (cached_has_bits & 0x00000008u) {
      k__ = from.k__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event_RetroactiveInfo_BloomInfo_Bloom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RetroactiveInfo_BloomInfo_Bloom::CopyFrom(const Event_RetroactiveInfo_BloomInfo_Bloom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RetroactiveInfo_BloomInfo_Bloom::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Event_RetroactiveInfo_BloomInfo_Bloom::Swap(Event_RetroactiveInfo_BloomInfo_Bloom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_RetroactiveInfo_BloomInfo_Bloom::InternalSwap(Event_RetroactiveInfo_BloomInfo_Bloom* other) {
  using std::swap;
  bits__.Swap(&other->bits__);
  swap(n__, other->n__);
  swap(m__, other->m__);
  swap(k__, other->k__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_RetroactiveInfo_BloomInfo_Bloom::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_RetroactiveInfo_BloomInfo_Bloom

// required uint32 N_ = 1;
bool Event_RetroactiveInfo_BloomInfo_Bloom::has_n_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_n_() {
  _has_bits_[0] |= 0x00000002u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_n_() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_n_() {
  n__ = 0u;
  clear_has_n_();
}
::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo_Bloom::n_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.N_)
  return n__;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_n_(::google::protobuf::uint32 value) {
  set_has_n_();
  n__ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.N_)
}

// required uint32 M_ = 2;
bool Event_RetroactiveInfo_BloomInfo_Bloom::has_m_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_m_() {
  _has_bits_[0] |= 0x00000004u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_m_() {
  _has_bits_[0] &= ~0x00000004u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_m_() {
  m__ = 0u;
  clear_has_m_();
}
::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo_Bloom::m_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.M_)
  return m__;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_m_(::google::protobuf::uint32 value) {
  set_has_m_();
  m__ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.M_)
}

// required uint32 K_ = 3;
bool Event_RetroactiveInfo_BloomInfo_Bloom::has_k_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_k_() {
  _has_bits_[0] |= 0x00000008u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_k_() {
  _has_bits_[0] &= ~0x00000008u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_k_() {
  k__ = 0u;
  clear_has_k_();
}
::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo_Bloom::k_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.K_)
  return k__;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_k_(::google::protobuf::uint32 value) {
  set_has_k_();
  k__ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.K_)
}

// required bytes bits_ = 4;
bool Event_RetroactiveInfo_BloomInfo_Bloom::has_bits_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_has_bits_() {
  _has_bits_[0] |= 0x00000001u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_has_bits_() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event_RetroactiveInfo_BloomInfo_Bloom::clear_bits_() {
  bits__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bits_();
}
const ::std::string& Event_RetroactiveInfo_BloomInfo_Bloom::bits_() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
  return bits__.GetNoArena();
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(const ::std::string& value) {
  set_has_bits_();
  bits__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
#if LANG_CXX11
void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(::std::string&& value) {
  set_has_bits_();
  bits__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
#endif
void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bits_();
  bits__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_bits_(const void* value, size_t size) {
  set_has_bits_();
  bits__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}
::std::string* Event_RetroactiveInfo_BloomInfo_Bloom::mutable_bits_() {
  set_has_bits_();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
  return bits__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event_RetroactiveInfo_BloomInfo_Bloom::release_bits_() {
  // @@protoc_insertion_point(field_release:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
  clear_has_bits_();
  return bits__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event_RetroactiveInfo_BloomInfo_Bloom::set_allocated_bits_(::std::string* bits_) {
  if (bits_ != NULL) {
    set_has_bits_();
  } else {
    clear_has_bits_();
  }
  bits__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bits_);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.RetroactiveInfo.BloomInfo.Bloom.bits_)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_RetroactiveInfo_BloomInfo::kBloomFieldNumber;
const int Event_RetroactiveInfo_BloomInfo::kPrefixBytesFieldNumber;
const int Event_RetroactiveInfo_BloomInfo::kPrefixSizeFieldNumber;
const int Event_RetroactiveInfo_BloomInfo::kPFalseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_RetroactiveInfo_BloomInfo::Event_RetroactiveInfo_BloomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.RetroactiveInfo.BloomInfo)
}
Event_RetroactiveInfo_BloomInfo::Event_RetroactiveInfo_BloomInfo(const Event_RetroactiveInfo_BloomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prefix_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prefix_bytes()) {
    prefix_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_bytes_);
  }
  if (from.has_bloom()) {
    bloom_ = new ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom(*from.bloom_);
  } else {
    bloom_ = NULL;
  }
  ::memcpy(&prefix_size_, &from.prefix_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&pfalse_) -
    reinterpret_cast<char*>(&prefix_size_)) + sizeof(pfalse_));
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.RetroactiveInfo.BloomInfo)
}

void Event_RetroactiveInfo_BloomInfo::SharedCtor() {
  _cached_size_ = 0;
  prefix_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bloom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pfalse_) -
      reinterpret_cast<char*>(&bloom_)) + sizeof(pfalse_));
}

Event_RetroactiveInfo_BloomInfo::~Event_RetroactiveInfo_BloomInfo() {
  // @@protoc_insertion_point(destructor:SDDR.Event.RetroactiveInfo.BloomInfo)
  SharedDtor();
}

void Event_RetroactiveInfo_BloomInfo::SharedDtor() {
  prefix_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bloom_;
}

void Event_RetroactiveInfo_BloomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_RetroactiveInfo_BloomInfo::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_RetroactiveInfo_BloomInfo& Event_RetroactiveInfo_BloomInfo::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_RetroactiveInfo_BloomInfo* Event_RetroactiveInfo_BloomInfo::New(::google::protobuf::Arena* arena) const {
  Event_RetroactiveInfo_BloomInfo* n = new Event_RetroactiveInfo_BloomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_RetroactiveInfo_BloomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!prefix_bytes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*prefix_bytes_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bloom_ != NULL);
      bloom_->::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom::Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&prefix_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pfalse_) -
        reinterpret_cast<char*>(&prefix_size_)) + sizeof(pfalse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_RetroactiveInfo_BloomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bloom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes prefix_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prefix_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 prefix_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_prefix_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefix_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float pFalse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_pfalse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pfalse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.RetroactiveInfo.BloomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.RetroactiveInfo.BloomInfo)
  return false;
#undef DO_
}

void Event_RetroactiveInfo_BloomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->bloom_, output);
  }

  // required bytes prefix_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->prefix_bytes(), output);
  }

  // required uint32 prefix_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prefix_size(), output);
  }

  // required float pFalse = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pfalse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.RetroactiveInfo.BloomInfo)
}

::google::protobuf::uint8* Event_RetroactiveInfo_BloomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->bloom_, deterministic, target);
  }

  // required bytes prefix_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->prefix_bytes(), target);
  }

  // required uint32 prefix_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prefix_size(), target);
  }

  // required float pFalse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pfalse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.RetroactiveInfo.BloomInfo)
  return target;
}

size_t Event_RetroactiveInfo_BloomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  size_t total_size = 0;

  if (has_prefix_bytes()) {
    // required bytes prefix_bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prefix_bytes());
  }

  if (has_bloom()) {
    // required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bloom_);
  }

  if (has_prefix_size()) {
    // required uint32 prefix_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix_size());
  }

  if (has_pfalse()) {
    // required float pFalse = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Event_RetroactiveInfo_BloomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes prefix_bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prefix_bytes());

    // required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bloom_);

    // required uint32 prefix_size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prefix_size());

    // required float pFalse = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_RetroactiveInfo_BloomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RetroactiveInfo_BloomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_RetroactiveInfo_BloomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.RetroactiveInfo.BloomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.RetroactiveInfo.BloomInfo)
    MergeFrom(*source);
  }
}

void Event_RetroactiveInfo_BloomInfo::MergeFrom(const Event_RetroactiveInfo_BloomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_prefix_bytes();
      prefix_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bloom()->::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom::MergeFrom(from.bloom());
    }
    if (cached_has_bits & 0x00000004u) {
      prefix_size_ = from.prefix_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      pfalse_ = from.pfalse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event_RetroactiveInfo_BloomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RetroactiveInfo_BloomInfo::CopyFrom(const Event_RetroactiveInfo_BloomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.RetroactiveInfo.BloomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RetroactiveInfo_BloomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_bloom()) {
    if (!this->bloom_->IsInitialized()) return false;
  }
  return true;
}

void Event_RetroactiveInfo_BloomInfo::Swap(Event_RetroactiveInfo_BloomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_RetroactiveInfo_BloomInfo::InternalSwap(Event_RetroactiveInfo_BloomInfo* other) {
  using std::swap;
  prefix_bytes_.Swap(&other->prefix_bytes_);
  swap(bloom_, other->bloom_);
  swap(prefix_size_, other->prefix_size_);
  swap(pfalse_, other->pfalse_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_RetroactiveInfo_BloomInfo::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_RetroactiveInfo_BloomInfo

// required .SDDR.Event.RetroactiveInfo.BloomInfo.Bloom bloom = 1;
bool Event_RetroactiveInfo_BloomInfo::has_bloom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event_RetroactiveInfo_BloomInfo::set_has_bloom() {
  _has_bits_[0] |= 0x00000002u;
}
void Event_RetroactiveInfo_BloomInfo::clear_has_bloom() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event_RetroactiveInfo_BloomInfo::clear_bloom() {
  if (bloom_ != NULL) bloom_->::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom::Clear();
  clear_has_bloom();
}
const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom& Event_RetroactiveInfo_BloomInfo::bloom() const {
  const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* p = bloom_;
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom*>(
      &::SDDR::_Event_RetroactiveInfo_BloomInfo_Bloom_default_instance_);
}
::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* Event_RetroactiveInfo_BloomInfo::mutable_bloom() {
  set_has_bloom();
  if (bloom_ == NULL) {
    bloom_ = new ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
  return bloom_;
}
::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* Event_RetroactiveInfo_BloomInfo::release_bloom() {
  // @@protoc_insertion_point(field_release:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
  clear_has_bloom();
  ::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* temp = bloom_;
  bloom_ = NULL;
  return temp;
}
void Event_RetroactiveInfo_BloomInfo::set_allocated_bloom(::SDDR::Event_RetroactiveInfo_BloomInfo_Bloom* bloom) {
  delete bloom_;
  bloom_ = bloom;
  if (bloom) {
    set_has_bloom();
  } else {
    clear_has_bloom();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.RetroactiveInfo.BloomInfo.bloom)
}

// required bytes prefix_bytes = 2;
bool Event_RetroactiveInfo_BloomInfo::has_prefix_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event_RetroactiveInfo_BloomInfo::set_has_prefix_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void Event_RetroactiveInfo_BloomInfo::clear_has_prefix_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event_RetroactiveInfo_BloomInfo::clear_prefix_bytes() {
  prefix_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix_bytes();
}
const ::std::string& Event_RetroactiveInfo_BloomInfo::prefix_bytes() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
  return prefix_bytes_.GetNoArena();
}
void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(const ::std::string& value) {
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
#if LANG_CXX11
void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(::std::string&& value) {
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
#endif
void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
void Event_RetroactiveInfo_BloomInfo::set_prefix_bytes(const void* value, size_t size) {
  set_has_prefix_bytes();
  prefix_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}
::std::string* Event_RetroactiveInfo_BloomInfo::mutable_prefix_bytes() {
  set_has_prefix_bytes();
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
  return prefix_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Event_RetroactiveInfo_BloomInfo::release_prefix_bytes() {
  // @@protoc_insertion_point(field_release:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
  clear_has_prefix_bytes();
  return prefix_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Event_RetroactiveInfo_BloomInfo::set_allocated_prefix_bytes(::std::string* prefix_bytes) {
  if (prefix_bytes != NULL) {
    set_has_prefix_bytes();
  } else {
    clear_has_prefix_bytes();
  }
  prefix_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix_bytes);
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_bytes)
}

// required uint32 prefix_size = 3;
bool Event_RetroactiveInfo_BloomInfo::has_prefix_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Event_RetroactiveInfo_BloomInfo::set_has_prefix_size() {
  _has_bits_[0] |= 0x00000004u;
}
void Event_RetroactiveInfo_BloomInfo::clear_has_prefix_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void Event_RetroactiveInfo_BloomInfo::clear_prefix_size() {
  prefix_size_ = 0u;
  clear_has_prefix_size();
}
::google::protobuf::uint32 Event_RetroactiveInfo_BloomInfo::prefix_size() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_size)
  return prefix_size_;
}
void Event_RetroactiveInfo_BloomInfo::set_prefix_size(::google::protobuf::uint32 value) {
  set_has_prefix_size();
  prefix_size_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.prefix_size)
}

// required float pFalse = 4;
bool Event_RetroactiveInfo_BloomInfo::has_pfalse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Event_RetroactiveInfo_BloomInfo::set_has_pfalse() {
  _has_bits_[0] |= 0x00000008u;
}
void Event_RetroactiveInfo_BloomInfo::clear_has_pfalse() {
  _has_bits_[0] &= ~0x00000008u;
}
void Event_RetroactiveInfo_BloomInfo::clear_pfalse() {
  pfalse_ = 0;
  clear_has_pfalse();
}
float Event_RetroactiveInfo_BloomInfo::pfalse() const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.BloomInfo.pFalse)
  return pfalse_;
}
void Event_RetroactiveInfo_BloomInfo::set_pfalse(float value) {
  set_has_pfalse();
  pfalse_ = value;
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.BloomInfo.pFalse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event_RetroactiveInfo::kBloomsFieldNumber;
const int Event_RetroactiveInfo::kMatchingSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event_RetroactiveInfo::Event_RetroactiveInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event.RetroactiveInfo)
}
Event_RetroactiveInfo::Event_RetroactiveInfo(const Event_RetroactiveInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blooms_(from.blooms_),
      matchingset_(from.matchingset_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SDDR.Event.RetroactiveInfo)
}

void Event_RetroactiveInfo::SharedCtor() {
  _cached_size_ = 0;
}

Event_RetroactiveInfo::~Event_RetroactiveInfo() {
  // @@protoc_insertion_point(destructor:SDDR.Event.RetroactiveInfo)
  SharedDtor();
}

void Event_RetroactiveInfo::SharedDtor() {
}

void Event_RetroactiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_RetroactiveInfo::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event_RetroactiveInfo& Event_RetroactiveInfo::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event_RetroactiveInfo* Event_RetroactiveInfo::New(::google::protobuf::Arena* arena) const {
  Event_RetroactiveInfo* n = new Event_RetroactiveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event_RetroactiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event.RetroactiveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blooms_.Clear();
  matchingset_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event_RetroactiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event.RetroactiveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blooms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes matchingSet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_matchingset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event.RetroactiveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event.RetroactiveInfo)
  return false;
#undef DO_
}

void Event_RetroactiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event.RetroactiveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blooms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blooms(static_cast<int>(i)), output);
  }

  // repeated bytes matchingSet = 2;
  for (int i = 0, n = this->matchingset_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->matchingset(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event.RetroactiveInfo)
}

::google::protobuf::uint8* Event_RetroactiveInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event.RetroactiveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blooms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->blooms(static_cast<int>(i)), deterministic, target);
  }

  // repeated bytes matchingSet = 2;
  for (int i = 0, n = this->matchingset_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->matchingset(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event.RetroactiveInfo)
  return target;
}

size_t Event_RetroactiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event.RetroactiveInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->blooms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blooms(static_cast<int>(i)));
    }
  }

  // repeated bytes matchingSet = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->matchingset_size());
  for (int i = 0, n = this->matchingset_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->matchingset(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_RetroactiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event.RetroactiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_RetroactiveInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event_RetroactiveInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event.RetroactiveInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event.RetroactiveInfo)
    MergeFrom(*source);
  }
}

void Event_RetroactiveInfo::MergeFrom(const Event_RetroactiveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event.RetroactiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blooms_.MergeFrom(from.blooms_);
  matchingset_.MergeFrom(from.matchingset_);
}

void Event_RetroactiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event.RetroactiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_RetroactiveInfo::CopyFrom(const Event_RetroactiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event.RetroactiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_RetroactiveInfo::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->blooms())) return false;
  return true;
}

void Event_RetroactiveInfo::Swap(Event_RetroactiveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event_RetroactiveInfo::InternalSwap(Event_RetroactiveInfo* other) {
  using std::swap;
  blooms_.InternalSwap(&other->blooms_);
  matchingset_.InternalSwap(&other->matchingset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event_RetroactiveInfo::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event_RetroactiveInfo

// repeated .SDDR.Event.RetroactiveInfo.BloomInfo blooms = 1;
int Event_RetroactiveInfo::blooms_size() const {
  return blooms_.size();
}
void Event_RetroactiveInfo::clear_blooms() {
  blooms_.Clear();
}
const ::SDDR::Event_RetroactiveInfo_BloomInfo& Event_RetroactiveInfo::blooms(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_.Get(index);
}
::SDDR::Event_RetroactiveInfo_BloomInfo* Event_RetroactiveInfo::mutable_blooms(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_.Mutable(index);
}
::SDDR::Event_RetroactiveInfo_BloomInfo* Event_RetroactiveInfo::add_blooms() {
  // @@protoc_insertion_point(field_add:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_.Add();
}
::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo >*
Event_RetroactiveInfo::mutable_blooms() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.RetroactiveInfo.blooms)
  return &blooms_;
}
const ::google::protobuf::RepeatedPtrField< ::SDDR::Event_RetroactiveInfo_BloomInfo >&
Event_RetroactiveInfo::blooms() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.RetroactiveInfo.blooms)
  return blooms_;
}

// repeated bytes matchingSet = 2;
int Event_RetroactiveInfo::matchingset_size() const {
  return matchingset_.size();
}
void Event_RetroactiveInfo::clear_matchingset() {
  matchingset_.Clear();
}
const ::std::string& Event_RetroactiveInfo::matchingset(int index) const {
  // @@protoc_insertion_point(field_get:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_.Get(index);
}
::std::string* Event_RetroactiveInfo::mutable_matchingset(int index) {
  // @@protoc_insertion_point(field_mutable:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_.Mutable(index);
}
void Event_RetroactiveInfo::set_matchingset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.matchingSet)
  matchingset_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Event_RetroactiveInfo::set_matchingset(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:SDDR.Event.RetroactiveInfo.matchingSet)
  matchingset_.Mutable(index)->assign(std::move(value));
}
#endif
void Event_RetroactiveInfo::set_matchingset(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SDDR.Event.RetroactiveInfo.matchingSet)
}
void Event_RetroactiveInfo::set_matchingset(int index, const void* value, size_t size) {
  matchingset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SDDR.Event.RetroactiveInfo.matchingSet)
}
::std::string* Event_RetroactiveInfo::add_matchingset() {
  // @@protoc_insertion_point(field_add_mutable:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_.Add();
}
void Event_RetroactiveInfo::add_matchingset(const ::std::string& value) {
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SDDR.Event.RetroactiveInfo.matchingSet)
}
#if LANG_CXX11
void Event_RetroactiveInfo::add_matchingset(::std::string&& value) {
  matchingset_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SDDR.Event.RetroactiveInfo.matchingSet)
}
#endif
void Event_RetroactiveInfo::add_matchingset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  matchingset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SDDR.Event.RetroactiveInfo.matchingSet)
}
void Event_RetroactiveInfo::add_matchingset(const void* value, size_t size) {
  matchingset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SDDR.Event.RetroactiveInfo.matchingSet)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Event_RetroactiveInfo::matchingset() const {
  // @@protoc_insertion_point(field_list:SDDR.Event.RetroactiveInfo.matchingSet)
  return matchingset_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Event_RetroactiveInfo::mutable_matchingset() {
  // @@protoc_insertion_point(field_mutable_list:SDDR.Event.RetroactiveInfo.matchingSet)
  return &matchingset_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kLinkabilityEventFieldNumber;
const int Event::kEncounterEventFieldNumber;
const int Event::kRetroactiveInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sddr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SDDR.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linkabilityevent()) {
    linkabilityevent_ = new ::SDDR::Event_LinkabilityEvent(*from.linkabilityevent_);
  } else {
    linkabilityevent_ = NULL;
  }
  if (from.has_encounterevent()) {
    encounterevent_ = new ::SDDR::Event_EncounterEvent(*from.encounterevent_);
  } else {
    encounterevent_ = NULL;
  }
  if (from.has_retroactiveinfo()) {
    retroactiveinfo_ = new ::SDDR::Event_RetroactiveInfo(*from.retroactiveinfo_);
  } else {
    retroactiveinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SDDR.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&linkabilityevent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retroactiveinfo_) -
      reinterpret_cast<char*>(&linkabilityevent_)) + sizeof(retroactiveinfo_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:SDDR.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete linkabilityevent_;
  if (this != internal_default_instance()) delete encounterevent_;
  if (this != internal_default_instance()) delete retroactiveinfo_;
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  protobuf_sddr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:SDDR.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(linkabilityevent_ != NULL);
      linkabilityevent_->::SDDR::Event_LinkabilityEvent::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encounterevent_ != NULL);
      encounterevent_->::SDDR::Event_EncounterEvent::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(retroactiveinfo_ != NULL);
      retroactiveinfo_->::SDDR::Event_RetroactiveInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SDDR.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkabilityevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SDDR.Event.EncounterEvent encounterEvent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encounterevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_retroactiveinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SDDR.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SDDR.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SDDR.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linkabilityevent_, output);
  }

  // optional .SDDR.Event.EncounterEvent encounterEvent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->encounterevent_, output);
  }

  // optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->retroactiveinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SDDR.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SDDR.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linkabilityevent_, deterministic, target);
  }

  // optional .SDDR.Event.EncounterEvent encounterEvent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->encounterevent_, deterministic, target);
  }

  // optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->retroactiveinfo_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SDDR.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SDDR.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
    if (has_linkabilityevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linkabilityevent_);
    }

    // optional .SDDR.Event.EncounterEvent encounterEvent = 2;
    if (has_encounterevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->encounterevent_);
    }

    // optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
    if (has_retroactiveinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->retroactiveinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SDDR.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SDDR.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SDDR.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SDDR.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_linkabilityevent()->::SDDR::Event_LinkabilityEvent::MergeFrom(from.linkabilityevent());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_encounterevent()->::SDDR::Event_EncounterEvent::MergeFrom(from.encounterevent());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_retroactiveinfo()->::SDDR::Event_RetroactiveInfo::MergeFrom(from.retroactiveinfo());
    }
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SDDR.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SDDR.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if (has_linkabilityevent()) {
    if (!this->linkabilityevent_->IsInitialized()) return false;
  }
  if (has_encounterevent()) {
    if (!this->encounterevent_->IsInitialized()) return false;
  }
  if (has_retroactiveinfo()) {
    if (!this->retroactiveinfo_->IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(linkabilityevent_, other->linkabilityevent_);
  swap(encounterevent_, other->encounterevent_);
  swap(retroactiveinfo_, other->retroactiveinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_sddr_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sddr_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional .SDDR.Event.LinkabilityEvent linkabilityEvent = 1;
bool Event::has_linkabilityevent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Event::set_has_linkabilityevent() {
  _has_bits_[0] |= 0x00000001u;
}
void Event::clear_has_linkabilityevent() {
  _has_bits_[0] &= ~0x00000001u;
}
void Event::clear_linkabilityevent() {
  if (linkabilityevent_ != NULL) linkabilityevent_->::SDDR::Event_LinkabilityEvent::Clear();
  clear_has_linkabilityevent();
}
const ::SDDR::Event_LinkabilityEvent& Event::linkabilityevent() const {
  const ::SDDR::Event_LinkabilityEvent* p = linkabilityevent_;
  // @@protoc_insertion_point(field_get:SDDR.Event.linkabilityEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_LinkabilityEvent*>(
      &::SDDR::_Event_LinkabilityEvent_default_instance_);
}
::SDDR::Event_LinkabilityEvent* Event::mutable_linkabilityevent() {
  set_has_linkabilityevent();
  if (linkabilityevent_ == NULL) {
    linkabilityevent_ = new ::SDDR::Event_LinkabilityEvent;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.linkabilityEvent)
  return linkabilityevent_;
}
::SDDR::Event_LinkabilityEvent* Event::release_linkabilityevent() {
  // @@protoc_insertion_point(field_release:SDDR.Event.linkabilityEvent)
  clear_has_linkabilityevent();
  ::SDDR::Event_LinkabilityEvent* temp = linkabilityevent_;
  linkabilityevent_ = NULL;
  return temp;
}
void Event::set_allocated_linkabilityevent(::SDDR::Event_LinkabilityEvent* linkabilityevent) {
  delete linkabilityevent_;
  linkabilityevent_ = linkabilityevent;
  if (linkabilityevent) {
    set_has_linkabilityevent();
  } else {
    clear_has_linkabilityevent();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.linkabilityEvent)
}

// optional .SDDR.Event.EncounterEvent encounterEvent = 2;
bool Event::has_encounterevent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Event::set_has_encounterevent() {
  _has_bits_[0] |= 0x00000002u;
}
void Event::clear_has_encounterevent() {
  _has_bits_[0] &= ~0x00000002u;
}
void Event::clear_encounterevent() {
  if (encounterevent_ != NULL) encounterevent_->::SDDR::Event_EncounterEvent::Clear();
  clear_has_encounterevent();
}
const ::SDDR::Event_EncounterEvent& Event::encounterevent() const {
  const ::SDDR::Event_EncounterEvent* p = encounterevent_;
  // @@protoc_insertion_point(field_get:SDDR.Event.encounterEvent)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_EncounterEvent*>(
      &::SDDR::_Event_EncounterEvent_default_instance_);
}
::SDDR::Event_EncounterEvent* Event::mutable_encounterevent() {
  set_has_encounterevent();
  if (encounterevent_ == NULL) {
    encounterevent_ = new ::SDDR::Event_EncounterEvent;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.encounterEvent)
  return encounterevent_;
}
::SDDR::Event_EncounterEvent* Event::release_encounterevent() {
  // @@protoc_insertion_point(field_release:SDDR.Event.encounterEvent)
  clear_has_encounterevent();
  ::SDDR::Event_EncounterEvent* temp = encounterevent_;
  encounterevent_ = NULL;
  return temp;
}
void Event::set_allocated_encounterevent(::SDDR::Event_EncounterEvent* encounterevent) {
  delete encounterevent_;
  encounterevent_ = encounterevent;
  if (encounterevent) {
    set_has_encounterevent();
  } else {
    clear_has_encounterevent();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.encounterEvent)
}

// optional .SDDR.Event.RetroactiveInfo retroactiveInfo = 3;
bool Event::has_retroactiveinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Event::set_has_retroactiveinfo() {
  _has_bits_[0] |= 0x00000004u;
}
void Event::clear_has_retroactiveinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
void Event::clear_retroactiveinfo() {
  if (retroactiveinfo_ != NULL) retroactiveinfo_->::SDDR::Event_RetroactiveInfo::Clear();
  clear_has_retroactiveinfo();
}
const ::SDDR::Event_RetroactiveInfo& Event::retroactiveinfo() const {
  const ::SDDR::Event_RetroactiveInfo* p = retroactiveinfo_;
  // @@protoc_insertion_point(field_get:SDDR.Event.retroactiveInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::SDDR::Event_RetroactiveInfo*>(
      &::SDDR::_Event_RetroactiveInfo_default_instance_);
}
::SDDR::Event_RetroactiveInfo* Event::mutable_retroactiveinfo() {
  set_has_retroactiveinfo();
  if (retroactiveinfo_ == NULL) {
    retroactiveinfo_ = new ::SDDR::Event_RetroactiveInfo;
  }
  // @@protoc_insertion_point(field_mutable:SDDR.Event.retroactiveInfo)
  return retroactiveinfo_;
}
::SDDR::Event_RetroactiveInfo* Event::release_retroactiveinfo() {
  // @@protoc_insertion_point(field_release:SDDR.Event.retroactiveInfo)
  clear_has_retroactiveinfo();
  ::SDDR::Event_RetroactiveInfo* temp = retroactiveinfo_;
  retroactiveinfo_ = NULL;
  return temp;
}
void Event::set_allocated_retroactiveinfo(::SDDR::Event_RetroactiveInfo* retroactiveinfo) {
  delete retroactiveinfo_;
  retroactiveinfo_ = retroactiveinfo;
  if (retroactiveinfo) {
    set_has_retroactiveinfo();
  } else {
    clear_has_retroactiveinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:SDDR.Event.retroactiveInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SDDR

// @@protoc_insertion_point(global_scope)
